<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://nicods96.github.io/hi/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nicods96.github.io/hi/" rel="alternate" type="text/html" /><updated>2025-04-02T09:15:27+00:00</updated><id>https://nicods96.github.io/hi/feed.xml</id><title type="html">Nicola Di Santo</title><subtitle>A blog about technology and stuff related</subtitle><entry><title type="html">Introducing pyrcodio</title><link href="https://nicods96.github.io/hi/introducing-pyrcodio/" rel="alternate" type="text/html" title="Introducing pyrcodio" /><published>2025-04-01T19:00:00+00:00</published><updated>2025-04-01T19:00:00+00:00</updated><id>https://nicods96.github.io/hi/introducing-pyrcodio</id><content type="html" xml:base="https://nicods96.github.io/hi/introducing-pyrcodio/"><![CDATA[<p><!-- TODO edit image -->
<img class="image" src="https://nicods96.github.io/hi/assets/images/pyrcodio/Germano_Mosconi.gif" alt="Cover Image" /></p>

<p>Once upon a time there were some 13-year-old kids bored as hell surfing the internet. They found Germano Mosconi on YouTube and they started to curse God for fun. They never stopped doing it.</p>

<p>NB: Useful for Italian-speaking people. People speaking other languages might not understand the value of this tool.</p>

<h2 id="getting-started">Getting Started</h2>

<p>I have always been fascinated by how Docker creates amazing container images like “pedantic-ice”. After some years spent working with code and countless hours spent debating naming conventions for whatever, here is a solution: <code class="language-plaintext highlighter-rouge">pyrcodio</code>.</p>

<p><code class="language-plaintext highlighter-rouge">pyrcodio</code> is a Python CLI utility that is able to generate names that might result unpleasant for people going to church, but fun for people who don’t.</p>

<p>If you are on macOS/Unix, all you need to do to try it out is:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>pyrcodio

pyrcodio
</code></pre></div></div>

<p>To use it while naming Git branches you can:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout <span class="nt">-b</span> <span class="si">$(</span>pyrcodio<span class="si">)</span>
</code></pre></div></div>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/pyrcodio/1.jpeg" alt="[1] Example Git branching" /></p>

<p>To use it while naming Docker containers you can:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span> <span class="s2">"</span><span class="si">$(</span>pyrcodio<span class="si">)</span><span class="s2">"</span> <span class="nt">-d</span> your-image
</code></pre></div></div>

<p>If you are on Windows, well, pyrcodio…</p>

<h2 id="reference">Reference</h2>
<p>You can find the project on <a href="https://github.com/nicoDs96/pyrcodio">GitHub</a></p>]]></content><author><name>nicods</name></author><category term="blog" /><category term="pyrcodio" /><category term="python" /><category term="name" /><category term="generator" /><category term="bestemmie" /><summary type="html"><![CDATA[A blasphemous CLI utility.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Bitcoin Flashing</title><link href="https://nicods96.github.io/hi/bitcoin-flashing/" rel="alternate" type="text/html" title="Bitcoin Flashing" /><published>2024-08-25T16:30:00+00:00</published><updated>2024-08-25T16:30:00+00:00</updated><id>https://nicods96.github.io/hi/bitcoin-flashing</id><content type="html" xml:base="https://nicods96.github.io/hi/bitcoin-flashing/"><![CDATA[<p><!-- TODO edit image -->
<img class="image" src="https://nicods96.github.io/hi/assets/images/btc-flash/Bitcoin.jpg" alt="Cover Image" /></p>

<p>A guy asked me to replicate Bitcoin flashing software he read about online. Here are the results.</p>

<h2 id="part-1-the-request-and-the-context">Part 1: The Request and the Context</h2>

<p>A guy from the tennis club I play at (yes, software engineers do have lives away from their computers) reached out to me. He asked if I could meet a friend of his who needed help with a cryptocurrency problem. After a few phone calls to understand the request, it turned out they wanted me to create scam software that could transfer Bitcoin from one wallet to another, only to have the transaction automatically rollback after X days.</p>

<p>After Googling around, I noticed that some people are selling the goose that lays golden eggs on Telegram, Instagram, or <a href="https://coinflashr.com/">websites</a> (they even advertise this kind of software on <a href="https://mmdrza.com/flash-aio-v1-0-3-ultimate/">GitHub</a>).</p>

<p>I was a bit skeptical about the request, and even more so about the legitimacy of this software, which promised the ability to issue Bitcoin transactions without any money. But, since we live in an endless quest for financial independence and self-sustainability without sacrificing our time working for others, I thought it might be worth digging deeper to see if there really was a way to grow money on trees.</p>

<p>The quest wasn’t successful but was enlightening. I discovered that Bitcoin flashing is a scam technique, perfectly explained at <a href="https://bitcoinflashing.com/bitcoin-flashing-in-2024/">bitcoinflashing.com</a> (no, it’s not a joke!).</p>

<p>Here’s how it works: The Bitcoin network takes some time (10 to 180 minutes on average) to validate a transaction, i.e., moving money from one wallet to another, because some peers in the network need to validate it (you may have heard about the mining process). Peers get a fee to validate the transaction; the higher the fee, the faster the validation. Until validation occurs, you will see the transferred Bitcoin in the recipient’s wallet, but they are in a “pending” state. You won’t know for sure that the Bitcoin is yours until the network approves or rejects the transaction. The catch is: if the fee is too low, the network’s peers will never validate the transaction because it’s not worth their time. The transaction will remain in a “pending” state, and you could trick someone into thinking it will eventually be approved when it actually won’t.</p>

<h2 id="part-2-the-experiment">Part 2: The Experiment</h2>

<p>I decided to tell the tennis club guy’s friend that it wasn’t feasible. But at this point, I was intrigued by the technique and disappointed that there wasn’t a single repository on GitHub with open-source code for “flashing Bitcoin” without asking for money (aren’t we supposed to make them appear from nowhere, wtf!!!). So, I decided to figure out how to make this feasible.</p>

<p>The first step was to search for tools that would make our lives easier. Eventually, I chose Python with <a href="https://bitcoinlib.readthedocs.io/en/latest/">bitcoinlib</a>. I then tried, unsuccessfully, to create a raw transaction from one wallet to another with the help of GenAI and documentation. I failed for two reasons:</p>
<ol>
  <li>I wasn’t constructing the transaction properly.</li>
  <li>The library performs integrity checks before issuing the transaction.</li>
</ol>

<p>After this severe failure, I was ready to give up, but then, in the darkest moment, inspiration struck.</p>

<p>At this point, I need to digress about modern text editors. I follow some folks online (yes, <a href="https://www.youtube.com/c/theprimeagen">theprimeagen</a> is one of them) who advocate for one text editor or another. I use modern text editors like IntelliJ or VSCode because I struggle to remember my birthdate, let alone learning infinite character sequences to complete a task. Without taking sides in this debate, there’s one feature of modern text editors that helps us in this story: code navigation (maybe vintage editors have this feature too, but I’m not sure…). Basically, you can click on a function name, and the editor will take you to the part of the file where the function is implemented, allowing you to quickly check the code. If you click on the name of a function/method in a library, you’ll be brought to that function’s implementation code (for some languages, like Java, it automatically decompiles the code too).</p>

<p>And here’s where the inspiration I was talking about comes in: since the bitcoinlib Wallet object has a method called <code class="language-plaintext highlighter-rouge">send</code> where you can customize the fee associated with a transaction, why not use it and remove all the blocks of code that check the integrity of a transaction before issuing it to the actual Bitcoin network using code navigation? So, I modified the <code class="language-plaintext highlighter-rouge">wallet.py</code> file in bitcoinlib version 0.6.15 as follows:</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/btc-flash/1.png" alt="[1] Custom wallet.py" /></p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/btc-flash/2.png" alt="[2] Custom wallet.py" /></p>

<p>One last catch before success: the Bitcoin mempool will perform balance validation, i.e., we can flash a transaction, but our wallet must have some UTXOs (for details on how this works, check <a href="https://www.alpsblockchain.com/en/media-news/how-bitcoin-transactions-work">here</a>). We cannot flash more than the UTXOs we possess.</p>

<p>Finally, you can find the completed Python script on my GitHub@<a href="https://github.com/nicoDs96/btc-flashing-demo">btc-flashing-demo</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Sadly, we still haven’t found money growing on trees. :(</p>

<h2 id="proof">Proof</h2>
<p>Using a blockchain explorer online we can verify the recipient wallet balance. We can see that there are some unconfirmed BTC that will never be confirmed. 
<img class="image" src="https://nicods96.github.io/hi/assets/images/btc-flash/3.png" alt="Proof" /></p>]]></content><author><name>nicods</name></author><category term="blog" /><category term="Bitcoin" /><category term="Flashing" /><category term="Scam" /><summary type="html"><![CDATA[A guy asked me to replicate Bitcoin flashing software he read about online. Here are the results.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">CDC is hot and you don’t know about it!</title><link href="https://nicods96.github.io/hi/CDC-is-hot/" rel="alternate" type="text/html" title="CDC is hot and you don’t know about it!" /><published>2024-04-17T20:00:00+00:00</published><updated>2024-04-17T20:00:00+00:00</updated><id>https://nicods96.github.io/hi/CDC-is-hot</id><content type="html" xml:base="https://nicods96.github.io/hi/CDC-is-hot/"><![CDATA[<p><img class="image" src="https://nicods96.github.io/hi/assets/images/cdc/cover.jpg" alt="Cover Image" /></p>

<p>The most interesting breakthrough in the software industry from a technical point of view generally goes unnoticed by most of the people working in tech. I like to think about it as the Nobel prize: nobody understands and nobody cares about you and your useless research until you make a lot of money with it or you win the Nobel prize. 
Sometimes the industry lets you believe, with an incredibly expensive marketing campaign, that there is a revolution in progress thanks to the technology they want to sell. Then the hype goes away and tech people start realizing that the cloud is just server rental with very high cost and low benefits, that blockchain is useless unless you want to revolutionize the economic system, and so on… Now it’s the moment of A.I., a bunch of matrix multiplications, which really few people in the world really understand, and that consumes tons of energy.
But the real innovative - maybe boring - breakthroughs are not known enough. An example is <a href="https://debezium.io/">Debezium</a>, an open-source Change Data Capture (CDC) platform that might revolutionize the way you think about your services and data platform.</p>

<h2 id="in-brief">In Brief</h2>
<p>On the web page, it is described as </p>
<blockquote>
  <p>an open-source distributed platform for change data capture. Start it up, point it at your databases, and your apps can start responding to all of the inserts, updates, and deletes that other apps commit to your databases. Debezium is durable and fast, so your apps can respond quickly and never miss an event, even when things go wrong.</p>
</blockquote>

<p>It allows you to listen to the database’s internal log and stream row-level changes wherever you want. 
If you have a full-text search service you might use it to easily upload the search index with a dedicated consumer of the records. 
If you are building a data platform you might use it to replicate in near real-time all the changes in your relational database and <a href="https://en.wikipedia.org/wiki/Slowly_changing_dimension">historicize the data</a> or replicate the table for analytical workloads.</p>

<p>In the following example, we are going to use only its engine to track the changes of a single table and log them all into a dedicated table on the same database. It might sound stupid but it is an actual use case I have implemented for a client, that needed to track all the changes made on a few tables. He has tried with database triggers but the performance degradation was significant (bulk insert of 24K row went from 1 to 30 minutes).</p>

<h2 id="the-experiment">The Experiment</h2>
<p>You can find the whole project on GitHub at:</p>
<ul>
  <li><a href="https://github.com/nicoDs96/debezium-engine-demo">Debezium Demo</a> </li>
  <li><a href="https://github.com/nicoDs96/debezium-engine-demo/releases/tag/v0.0.1-alpha">Jar file</a></li>
</ul>

<p>And some useful documentation to customize the project at:</p>
<ul>
  <li><a href="https://debezium.io/documentation/reference/stable/connectors/postgresql.html">PostgreSQL connector documentation</a></li>
</ul>

<h2 id="demo">Demo</h2>
<p>First of all, we are going to create a database and we will use Docker for that</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
<span class="na"> postgres</span><span class="pi">:</span>
<span class="na">  container_name</span><span class="pi">:</span> <span class="s">pg-local</span>
<span class="na">  image</span><span class="pi">:</span> <span class="s">postgres</span>
<span class="na">  hostname</span><span class="pi">:</span> <span class="s">localhost</span>
<span class="na">  ports</span><span class="pi">:</span>
<span class="s">   - "5432:5432"</span>
<span class="na">  environment</span><span class="pi">:</span>
<span class="na">   POSTGRES_USER</span><span class="pi">:</span> <span class="s">postgres</span>
<span class="na">   POSTGRES_PASSWORD</span><span class="pi">:</span> <span class="s">postgres</span>
<span class="na">   POSTGRES_DB</span><span class="pi">:</span> <span class="s">postgres</span>
<span class="na">  restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
<span class="na">  volumes</span><span class="pi">:</span>
<span class="s">   - ./db_init_scripts:/docker-entrypoint-initdb.d</span>
<span class="na">  command</span><span class="pi">:</span>
<span class="s">   - "postgres"</span>
<span class="s">   - "-c"</span>
<span class="s">   - "wal_level=logical"</span>
</code></pre></div></div>
<p>Then we define db init scripts into the <code class="language-plaintext highlighter-rouge">db_init_scripts</code> folder:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="nb">set</span> <span class="nt">-e</span>
<span class="nb">set</span> <span class="nt">-x</span>

psql <span class="nt">-v</span> <span class="nv">ON_ERROR_STOP</span><span class="o">=</span>1 <span class="nt">--username</span> <span class="s2">"</span><span class="nv">$POSTGRES_USER</span><span class="s2">"</span> <span class="nt">--dbname</span> <span class="s2">"</span><span class="nv">$POSTGRES_DB</span><span class="s2">"</span> <span class="o">&lt;&lt;-</span><span class="no">EOSQL</span><span class="sh">

create schema tracking;
CREATE TABLE public.debezium_offset_storage (
  id varchar(36) NOT NULL PRIMARY KEY,
  offset_key varchar(1255) NULL,
  offset_val varchar(1255) NULL,
  record_insert_ts timestamp NOT NULL,
  record_insert_seq int4 NOT NULL
);
  
CREATE TABLE public.dummy_table (
  username text NOT NULL PRIMARY KEY,
  address text
);
</span><span class="no">EOSQL
</span></code></pre></div></div>

<p>Now we can start the database and capture changes to the table <code class="language-plaintext highlighter-rouge">dummy_table</code> running the jar</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># start the database</span>
docker compose <span class="nt">-up</span> <span class="nt">-d</span>
<span class="c"># download the jar</span>
wget <span class="nt">-O</span> debezium-demo.jar https://github.com/nicoDs96/debezium-engine-demo/releases/download/v0.0.1-alpha/debezium-demo.jar
<span class="c"># start CDC</span>
java <span class="nt">--jar</span> debezium-demo.jar
</code></pre></div></div>

<p>Now all the operations made on the table <code class="language-plaintext highlighter-rouge">dummy_table</code> will be recorded under <code class="language-plaintext highlighter-rouge">tracking.dummy_table_tracking</code>:
<img class="image" src="https://nicods96.github.io/hi/assets/images/cdc/log.png" alt="Debezium Log Screenshot" />
<img class="image" src="https://nicods96.github.io/hi/assets/images/cdc/psql.png" alt="Psql Screenshot" /></p>

<p>Looks like magic but it’s not. Let’s break it down.</p>

<h3 id="spring-boot">Spring Boot</h3>
<p>We need to create a Spring Boot project with the following dependencies</p>
<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependencies&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-data-jpa<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-web<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>

    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-devtools<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;scope&gt;</span>runtime<span class="nt">&lt;/scope&gt;</span>
      <span class="nt">&lt;optional&gt;</span>true<span class="nt">&lt;/optional&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-test<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.postgresql<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>postgresql<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>io.debezium<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>debezium-api<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>${debezium.version}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>io.debezium<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>debezium-embedded<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>${debezium.version}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>io.debezium<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>debezium-storage-jdbc<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>${debezium.version}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>io.debezium<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>debezium-connector-postgres<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>${debezium.version}<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.projectlombok<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>lombok<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>1.18.30<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework.boot<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-boot-starter-actuator<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>io.micrometer<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>micrometer-registry-cloudwatch2<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>
</code></pre></div></div>
<p>The project will have the following structure</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./
├── PostgresLocal <span class="c"># database docker files and scripts</span>
│   └── db_init_scripts
├── src
│   ├── main
│   │   ├── java
│   │   │   └── it
│   │   │    └── nicods
│   │   │      └── debeziumdemo <span class="c"># Spring boot entrypoint</span>
│   │   │        ├── config   # debezium configuration
│   │   │        ├── data    # data utilities
│   │   │        │   └── entity  # entity definition
│   │   │        └── listener  # main logic
│   │   └── resources
│   │    └── ddl
│   └── <span class="nb">test</span>
│    
└── target
</code></pre></div></div>
<p>Under <code class="language-plaintext highlighter-rouge">data/entity</code> we are going to define the entity corresponding to the table where we will log all the changes to the main table, the JPA repository, and some utility classes to serialize/deserialize data from deuterium to the database.</p>

<p>Looking at the entity definition below we can notice three extra fields in the class:</p>
<ol>
  <li>The id of the modified record used as primary key (note that this id is like a surrogate key into a data warehouse because the natural pk isn’t sufficient)</li>
  <li>The operation field, telling if the record has been created (c), updated (u), deleted (d). The read (r) is reserved for snapshot, <a href="https://debezium.io/documentation/reference/stable/connectors/postgresql.html#postgresql-create-events">check the doc for details</a>.</li>
  <li>The timestamp of the captured change.
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"dummy_table_tracking"</span><span class="o">,</span> <span class="n">schema</span> <span class="o">=</span> <span class="s">"tracking"</span><span class="o">)</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@Builder</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DummyTable</span> <span class="o">{</span>
<span class="err">  </span><span class="nd">@Id</span>
<span class="err">  </span><span class="nd">@GeneratedValue</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">Integer</span> <span class="nc">Id</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">address</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">operation</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">ZonedDateTime</span> <span class="n">ts</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <p>The JPA repository:</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DummyTableRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">DummyTable</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="o">{}</span>
</code></pre></div>    </div>
    <p>The class for the Debezium JSON representation of CDC data:</p>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@AllArgsConstructor</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ToString</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DummyTableChangeEvent</span> <span class="o">{</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">DummyTable</span> <span class="n">before</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">DummyTable</span> <span class="n">after</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">op</span><span class="o">;</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">Long</span> <span class="n">ts_ms</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>Now we can wrap everything defined above together and define a service capable of dealing with captured change events for the table of interest. The service will consume the event and simply record it into the designated table.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DummyTableService</span> <span class="kd">extends</span> <span class="nc">TrackingService</span><span class="o">&lt;</span><span class="nc">DummyTableChangeEvent</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="err">  </span><span class="kd">public</span> <span class="nc">DummyTableRepository</span> <span class="n">repository</span><span class="o">;</span>

<span class="err">  </span><span class="kd">public</span> <span class="nf">DummyTableService</span><span class="o">(</span><span class="nc">DummyTableRepository</span> <span class="n">repository</span><span class="o">){</span>
<span class="err">    </span><span class="k">this</span><span class="o">.</span><span class="na">repository</span> <span class="o">=</span><span class="n">repository</span><span class="o">;</span>
<span class="err">  </span><span class="o">}</span>

<span class="err">  </span><span class="nd">@Override</span>
<span class="err">  </span><span class="nd">@Transactional</span>
<span class="err">  </span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleEvent</span><span class="o">(</span><span class="nc">DummyTableChangeEvent</span> <span class="n">record</span><span class="o">)</span> <span class="o">{</span>
<span class="err">    </span><span class="k">if</span><span class="o">(</span><span class="n">record</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
<span class="err">      </span><span class="nc">DummyTable</span> <span class="n">bl</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
<span class="err">      </span><span class="nc">DummyTable</span> <span class="n">after</span> <span class="o">=</span> <span class="n">record</span><span class="o">.</span><span class="na">getAfter</span><span class="o">();</span>
<span class="err">      </span><span class="nc">DummyTable</span> <span class="n">before</span> <span class="o">=</span> <span class="n">record</span><span class="o">.</span><span class="na">getBefore</span><span class="o">();</span>

<span class="err">      </span><span class="k">if</span><span class="o">(</span><span class="n">after</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//in case of delete after is null and before is valued</span>
<span class="err">        </span><span class="n">bl</span> <span class="o">=</span> <span class="n">after</span><span class="o">;</span>
<span class="err">      </span><span class="o">}</span>
<span class="err">      </span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">before</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span> <span class="c1">//in case of delete after is null and before is valued</span>
<span class="err">        </span><span class="n">bl</span> <span class="o">=</span> <span class="n">before</span><span class="o">;</span>
<span class="err">      </span><span class="o">}</span>
<span class="err">      </span><span class="k">if</span><span class="o">(</span><span class="n">bl</span><span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
<span class="err">        </span><span class="nc">ZonedDateTime</span> <span class="n">zdt</span> <span class="o">=</span> <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">ofInstant</span><span class="o">(</span><span class="nc">Instant</span><span class="o">.</span><span class="na">ofEpochMilli</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">getTs_ms</span><span class="o">()),</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">systemDefault</span><span class="o">());</span>
<span class="err">        </span><span class="n">bl</span><span class="o">.</span><span class="na">setTs</span><span class="o">(</span><span class="n">zdt</span><span class="o">);</span>
<span class="err">        </span><span class="n">bl</span><span class="o">.</span><span class="na">setOperation</span><span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">getOp</span><span class="o">());</span>
<span class="err">        </span><span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Saving {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">);</span>
<span class="err">        </span><span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">bl</span><span class="o">);</span>
<span class="err">      </span><span class="o">}</span><span class="k">else</span> <span class="o">{</span>
<span class="err">        </span><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Before and After are both null {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">);</span>
<span class="err">      </span><span class="o">}</span>
<span class="err">    </span><span class="o">}</span><span class="k">else</span><span class="o">{</span>
<span class="err">      </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"Change record is null"</span><span class="o">);</span>
<span class="err">    </span><span class="o">}</span>
<span class="err">  </span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>The <code class="language-plaintext highlighter-rouge">TrackingService</code> extended by the service class is a simple utility to deserialize Json using Jackson’s ObjectMapper:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="no">T</span> <span class="nf">deserialize</span><span class="o">(</span><span class="nc">String</span> <span class="n">sourceRecordValue</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">clazz</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
<span class="err">  </span><span class="k">if</span> <span class="o">(</span><span class="nc">Objects</span><span class="o">.</span><span class="na">nonNull</span><span class="o">(</span><span class="n">sourceRecordValue</span><span class="o">))</span> <span class="o">{</span>
<span class="err">    </span><span class="nc">ObjectMapper</span> <span class="n">mapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
<span class="err">    </span><span class="n">mapper</span><span class="o">.</span><span class="na">configure</span><span class="o">(</span><span class="nc">DeserializationFeature</span><span class="o">.</span><span class="na">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
<span class="err">    </span><span class="k">return</span> <span class="n">mapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">sourceRecordValue</span><span class="o">,</span> <span class="n">clazz</span><span class="o">);</span>
<span class="err">  </span><span class="o">}</span>
<span class="err">  </span><span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="err">  </span><span class="o">}</span>
</code></pre></div></div>
<p>Now we need to create the actual Debezium Engine that is capable of reading the database WAL and streaming all the events of interest to our <code class="language-plaintext highlighter-rouge">DummyTableService</code>. The class is responsible for</p>
<ol>
  <li>create the engine</li>
  <li>start the engine</li>
  <li>pass the event to the appropriate service to handle it</li>
  <li>terminate the engine</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DebeziumSourceEventListener</span> <span class="o">{</span>

<span class="err">  </span><span class="c1">//This will be used to run the engine asynchronously</span>
<span class="err">  </span><span class="kd">private</span> <span class="kd">final</span> <span class="nc">Executor</span> <span class="n">executor</span><span class="o">;</span>

<span class="err">  </span><span class="c1">//DebeziumEngine serves as an easy-to-use wrapper around any Debezium connector</span>
<span class="err">  </span><span class="kd">private</span> <span class="kd">final</span> <span class="nc">DebeziumEngine</span><span class="o">&lt;</span><span class="nc">ChangeEvent</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">debeziumEngine</span><span class="o">;</span>

<span class="err">  </span><span class="nd">@Autowired</span>
<span class="err">  </span><span class="kd">private</span> <span class="nc">DummyTableRepository</span> <span class="n">dummyTableRepository</span><span class="o">;</span>


<span class="err">  </span><span class="kd">public</span> <span class="nf">DebeziumSourceEventListener</span><span class="o">(</span>
<span class="err">      </span><span class="nc">Configuration</span> <span class="n">postgresConnector</span><span class="o">)</span> <span class="o">{</span>
<span class="err">    </span><span class="c1">// Create a new single-threaded executor.</span>
<span class="err">    </span><span class="k">this</span><span class="o">.</span><span class="na">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newSingleThreadExecutor</span><span class="o">();</span>

<span class="err">    </span><span class="c1">// Create a new DebeziumEngine instance.</span>
<span class="err">    </span><span class="c1">//TODO: understand Configuration origin</span>
<span class="err">    </span><span class="k">this</span><span class="o">.</span><span class="na">debeziumEngine</span> <span class="o">=</span>
<span class="err">        </span><span class="nc">DebeziumEngine</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="nc">Json</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="err">            </span><span class="o">.</span><span class="na">using</span><span class="o">(</span><span class="n">postgresConnector</span><span class="o">.</span><span class="na">asProperties</span><span class="o">())</span>
<span class="err">            </span><span class="o">.</span><span class="na">notifying</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">handleChangeEvent</span><span class="o">)</span>
<span class="err">            </span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="err">  </span><span class="o">}</span>

<span class="err">  </span><span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">handleChangeEvent</span><span class="o">(</span><span class="nc">ChangeEvent</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">record</span><span class="o">)</span> <span class="o">{</span>
<span class="err">    </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"JSON Record {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">);</span>
<span class="err">    </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"JSON Key {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">.</span><span class="na">key</span><span class="o">());</span>
<span class="err">    </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"JSON Value {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">.</span><span class="na">value</span><span class="o">());</span>
<span class="err">    </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"JSON Headers {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">.</span><span class="na">headers</span><span class="o">());</span>
<span class="err">    </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"JSON Destination {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">.</span><span class="na">destination</span><span class="o">());</span>

<span class="err">    </span><span class="nc">String</span> <span class="n">sourceRecordValue</span> <span class="o">=</span> <span class="n">record</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
<span class="err">    </span><span class="nc">DummyTableService</span> <span class="n">dummyTableService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DummyTableService</span><span class="o">(</span><span class="n">dummyTableRepository</span><span class="o">);</span>

<span class="err">    </span><span class="k">try</span><span class="o">{</span>
<span class="err">      </span><span class="k">switch</span> <span class="o">(</span><span class="n">record</span><span class="o">.</span><span class="na">destination</span><span class="o">()){</span>
<span class="err">        </span><span class="k">case</span> <span class="s">"cdc-demo-connector.public.dummy_table"</span><span class="o">:</span>
<span class="err">          </span><span class="nc">DummyTableChangeEvent</span> <span class="n">dummyTableChangeEvent</span> <span class="o">=</span> <span class="n">dummyTableService</span><span class="o">.</span><span class="na">deserialize</span><span class="o">(</span><span class="n">sourceRecordValue</span><span class="o">,</span> <span class="nc">DummyTableChangeEvent</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="err">          </span><span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"JSON DESER {}"</span><span class="o">,</span> <span class="n">dummyTableChangeEvent</span><span class="o">);</span>
<span class="err">          </span><span class="n">dummyTableService</span><span class="o">.</span><span class="na">handleEvent</span><span class="o">(</span><span class="n">dummyTableChangeEvent</span><span class="o">);</span>
<span class="err">          </span><span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
<span class="err">        </span><span class="k">default</span><span class="o">:</span>
<span class="err">          </span><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Ignoring unknown destination {}"</span><span class="o">,</span> <span class="n">record</span><span class="o">.</span><span class="na">destination</span><span class="o">());</span>
<span class="err">          </span><span class="k">break</span><span class="o">;</span>
<span class="err">      </span><span class="o">}</span>

<span class="err">    </span><span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">){</span>
<span class="err">      </span><span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Error deserializing source record value"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
<span class="err">      </span><span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="err">    </span><span class="o">}</span>
<span class="err">    </span><span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="err">  </span><span class="o">}</span>

<span class="err">  </span><span class="nd">@PostConstruct</span>
<span class="err">  </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
<span class="err">    </span><span class="k">this</span><span class="o">.</span><span class="na">executor</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">debeziumEngine</span><span class="o">);</span>
<span class="err">  </span><span class="o">}</span>

<span class="err">  </span><span class="nd">@PreDestroy</span>
<span class="err">  </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
<span class="err">    </span><span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">debeziumEngine</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="err">      </span><span class="k">this</span><span class="o">.</span><span class="na">debeziumEngine</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
<span class="err">    </span><span class="o">}</span>
<span class="err">  </span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Note that to create the engine we need give to it the configurations loaded from the application.properties, defined in <code class="language-plaintext highlighter-rouge">config/DebeziumConnectorConfig</code>. The most importants are:</p>
<ul>
  <li>offset.storage telling to store the progress made reading WAL to the DB so that in case of failure or restart it can continue from where it left</li>
  <li>table.include.list telling the tables where changes must be captured</li>
  <li>snapshot.mode telling if to perform and how to perform a snaposhot of the tables before starting</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DebeziumConnectorConfig</span> <span class="o">{</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.datasource.url}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">postgresUrl</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.database.hostname}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">postgresHostname</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.database.dbname}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">postgresDBName</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.database.port}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">postgresPort</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.datasource.username}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">postgresUsername</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.datasource.password}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">postgresPassword</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.schema.include.list}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">databaseSchemaIncludeList</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.table.include.list}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">databaseTableIncludeList</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.connector.name}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">connectorName</span><span class="o">;</span>

<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.plugin.name}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">pluginName</span><span class="o">;</span>
<span class="err"> </span><span class="nd">@Value</span><span class="o">(</span><span class="s">"${debezium.snapshot.mode}"</span><span class="o">)</span>
<span class="err"> </span><span class="kd">private</span> <span class="nc">String</span> <span class="n">snapshotMode</span><span class="o">;</span>


<span class="err"> </span><span class="nd">@Bean</span>
<span class="err"> </span><span class="kd">public</span> <span class="n">io</span><span class="o">.</span><span class="na">debezium</span><span class="o">.</span><span class="na">config</span><span class="o">.</span><span class="na">Configuration</span> <span class="nf">mongodbConnector</span><span class="o">()</span> <span class="o">{</span>

<span class="err">  </span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">configMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

<span class="err">  </span><span class="c1">//This sets the name of the Debezium connector instance. It’s used for logging and metrics.</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">connectorName</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//This specifies the Java class for the connector. Debezium uses this to create the connector instance.</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"connector.class"</span><span class="o">,</span> <span class="s">"io.debezium.connector.postgresql.PostgresConnector"</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"database.user"</span><span class="o">,</span> <span class="n">postgresUsername</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"database.dbname"</span><span class="o">,</span> <span class="n">postgresDBName</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"database.hostname"</span><span class="o">,</span> <span class="n">postgresHostname</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"database.password"</span><span class="o">,</span> <span class="n">postgresPassword</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"database.port"</span><span class="o">,</span> <span class="n">postgresPort</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//This sets the plugin to use</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"plugin.name"</span><span class="o">,</span> <span class="n">pluginName</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//This sets the Java class that Debezium uses to store the progress of the connector.</span>
<span class="err">  </span><span class="c1">// In this case, it’s using a JDBC-based store, which means it will store the offset in a relational database.</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"offset.storage"</span><span class="o">,</span> <span class="s">"io.debezium.storage.jdbc.offset.JdbcOffsetBackingStore"</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//This is the JDBC URL for the database where Debezium stores the connector offsets (progress).</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"offset.storage.jdbc.url"</span><span class="o">,</span> <span class="n">postgresUrl</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"offset.storage.jdbc.user"</span><span class="o">,</span> <span class="n">postgresUsername</span><span class="o">);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"offset.storage.jdbc.password"</span><span class="o">,</span> <span class="n">postgresPassword</span><span class="o">);</span>
<span class="err">  </span><span class="c1">// This writes offsets to plain file</span>
<span class="err">  </span><span class="c1">//configMap.put("offset.storage", "org.apache.kafka.connect.storage.FileOffsetBackingStore");</span>
<span class="err">  </span><span class="c1">//configMap.put("offset.storage.file.filename", "./debezium-offset.dat");</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"offset.flush.interval.ms"</span><span class="o">,</span> <span class="s">"2000"</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//This prefix is added to all Kafka topics that this connector writes to.</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"topic.prefix"</span><span class="o">,</span> <span class="s">"cdc-demo-connector"</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//This is a comma-separated list of Postgres database names that the connector will monitor for changes.</span>
<span class="err">  </span><span class="c1">//configMap.put("schema.include.list", databaseSchemaIncludeList);</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"table.include.list"</span><span class="o">,</span> <span class="n">databaseTableIncludeList</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//this set the snapshot mode</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"snapshot.mode"</span><span class="o">,</span> <span class="n">snapshotMode</span><span class="o">);</span>
<span class="err">  </span><span class="c1">// this includes/exclude the schema in the message</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"converter.schemas.enable"</span><span class="o">,</span> <span class="s">"false"</span><span class="o">);</span>
<span class="err">  </span><span class="c1">//When errors.log.include.messages set to true, then any error messages resulting from failed operations</span>
<span class="err">  </span><span class="c1">// are also written to the log.</span>
<span class="err">  </span><span class="n">configMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"errors.log.include.messages"</span><span class="o">,</span> <span class="s">"true"</span><span class="o">);</span>

<span class="err">  </span><span class="k">return</span> <span class="n">io</span><span class="o">.</span><span class="na">debezium</span><span class="o">.</span><span class="na">config</span><span class="o">.</span><span class="na">Configuration</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">configMap</span><span class="o">);</span>
<span class="err"> </span><span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="conclusions">Conclusions</h2>
<p> In this demo, we have explored a custom configuration for a very particular use case, but with the standard architecture using Kafka and enabling snapshots, we might be able, for example, to replicate an entire database on another system with ease, and without defining complex pipelines. We might be able to make our services reactive to other services-managed entities and so on. 
The more I think about it and more use cases come to my mind for this astonishing piece of innovation.</p>]]></content><author><name>nicods</name></author><category term="blog" /><category term="CDC" /><category term="Debezium" /><category term="ChangeDataCapture" /><summary type="html"><![CDATA[Change Data Capture is one of the hottest and most interesting feature you can add to your system, yet there is not hype around it.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">ChatGPT won’t steal my job yet!</title><link href="https://nicods96.github.io/hi/ChatGPT-wont-steal-my-job-yet/" rel="alternate" type="text/html" title="ChatGPT won’t steal my job yet!" /><published>2023-01-05T00:00:00+00:00</published><updated>2023-01-05T00:00:00+00:00</updated><id>https://nicods96.github.io/hi/ChatGPT-wont-steal-my-job-yet</id><content type="html" xml:base="https://nicods96.github.io/hi/ChatGPT-wont-steal-my-job-yet/"><![CDATA[<p><img class="image" src="https://nicods96.github.io/hi/assets/images/chatgpt/cover.jpg" alt="Cover Image" /></p>

<p>Since its release, we have heard a lot about <a href="https://openai.com/blog/chatgpt/">ChatGPT</a>, how it is amazing, how it will steal our job, how we are close to Touring completeness bla bla. As always, when a new product is released, there is a lot of hype and a lot of people talking about things they know nothing about. With this post I would like to share my experience, to show how we are far from AI taking over the world.</p>

<h2 id="the-experiment">The Experiment</h2>
<p>It was a lazy morning, I was trying to write an API endpoint in Java that, when invoked could add a user of the app to a specific user group. The identity and access management (IAM) service I was using was <a href="https://www.keycloak.org/">keycloak</a>. It offers both a REST API and a Java API to administer its users. Since, as I said, It was a lazy morning, I wasn’t inspired to read tons of documentation to find out how to do it. Suddenly, a light bulb turns on and I decide to try ChatGPT, this magic tool everyone was talking about. After signing up I write the question, and magically enough It answers me, showing also a code sample. I was impressed.</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/chatgpt/1.png" alt="Experiment 1 Image" /></p>

<p>But It was an illusion that lasted for a moment. When I tried the code, it was not suited for my version of the library. Why Do not try to give more details? Ok, let’s do it:</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/chatgpt/2.png" alt="Experiment 2 Image" />
Surprise surprise, I start recognizing something is not working. ChatGPT keeps showing me code that is not in the library, invented constructors, and so on. It goes on for a while, I get more and more frustrated, and in the end, I give up.
<img class="image" src="https://nicods96.github.io/hi/assets/images/chatgpt/3.png" alt="Experiment 3 Image" />
Once the anger has been disposed of, I understand that I don’t have to blame chatGPT but all the hype around It. Again, another new technology isn’t presented for what it is. <br />
Now that I am calm again, I want to apologize to get mad and frustrated at ChatGPT. In the end, I find out how to add a user to a group using the Keycloak Admin API and I want to teach it to ChatGPT. But, sadly, my new friend is not able to learn :’(
<img class="image" src="https://nicods96.github.io/hi/assets/images/chatgpt/4.png" alt="Experiment 4 Image" />
After this great coming out, instead of accepting defeat, my friend decides to be the most arrogant in the room, and again gives me the wrong advice on how to do it. At the end of the day, I feel a mix of emotions. I am very sad because I lost a new friend, I am not able to be a friend to an AI who wants to make me wrong, for fun or I don’t know what. I am also relieved since my job is safe for another couple of years.</p>

<h2 id="conclusions">Conclusions</h2>
<p>I am very annoyed by the communications models when new technology is released. A lot of clickbait articles and posts are around, full of misinformation, especially in the tech industry. And this is bad. People capable of understanding what an AI is are few and they know it is not a mature technology, they know AI, as it is intended now, is very limited to some matrix multiplication, convolutions, and derivatives. And we cannot emulate reasoning with math and computers, not yet… Let’s try to do not to forget that technology is made to make our lives easier but not to replace us.</p>]]></content><author><name>nicods</name></author><category term="blog" /><category term="ChatGPT" /><category term="AI" /><category term="OpenAI" /><summary type="html"><![CDATA[My experience with ChatGPT and why it won't steal my job for another couple of years!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/chatgpt/cover.png" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/chatgpt/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Building a custom news feed</title><link href="https://nicods96.github.io/hi/building-a-custom-news-feed/" rel="alternate" type="text/html" title="Building a custom news feed" /><published>2022-10-22T00:00:00+00:00</published><updated>2022-10-22T00:00:00+00:00</updated><id>https://nicods96.github.io/hi/building-a-custom-news-feed</id><content type="html" xml:base="https://nicods96.github.io/hi/building-a-custom-news-feed/"><![CDATA[<p><img class="image" src="https://nicods96.github.io/hi/assets/images/news-feed/cover.png" alt="Cover Image" /></p>

<p>In this article, I will explain how to create a website that shows you the latest post from your favorite blog, newspaper, or whatever with RSS/Atom feed support.</p>
<ul>
  <li>I will explain why to do it</li>
  <li>Where you can find it</li>
  <li>The Architecture of the system with some code snippets</li>
  <li>How I deployed the components (<strong>without spending money</strong>)</li>
  <li>How you can use the project to deploy your news aggregation</li>
  <li>Eventual future developments</li>
</ul>

<h2 id="ok-but-why">Ok, but Why?</h2>
<p>Well, I like to write and do some weekend projects but the main reason is that I use Linkedin mainly to read the latest news from tech blogs. The drawback is that I need to constantly see motivational post :muscle:, the latest (fake) success story :shit:, the nth financial advice I don’t need :thumbsup:, the top 10 moves that will make me rich :moneybag: bla bla bla.<br />
I was wondering if there is a way to keep track of the latest news from my favorites tech blogs without being costantly exposed to all that crap and I remembered of <a href="https://validator.w3.org/feed/docs/rss2.html">RSS</a> and <a href="https://validator.w3.org/feed/docs/atom.html">Atom</a> feeds. I downloaded a feed reader extension in my favorite browser and used it for a while, then I thought that instead of having it in my browser, It might be useful to create a website so that whoever has the same need can use it.<br />
It is also an open-source project so you can contribute to it, you can improve it, can propose to support new blogs, or can download it and built your website.
Last but not least the project was really useful to experiment with technologies I was curious to deepen.</p>

<h2 id="where-to-find-it">Where to find it</h2>
<ul>
  <li><a href="https://nicods96.github.io/tech-news-daily/">The Website</a></li>
  <li><a href="https://github.com/nicoDs96/tech-news-daily">The source code</a></li>
</ul>

<h2 id="the-design">The Design</h2>
<p>As you can see from the cover image above, the design of the whole system is very simple: we have a poller that listens periodically to the feeds and updates a database, and we have an API that exposes the articles in the database to the web app, and we have a web app that lets you access the latest articles in your web browser. 
The website is minimal, it only presents the title of the article, its source, the authors, categories if any, and the publish date. By clicking on the article you will be redirected to the main blog to read it.<br />
<img class="image" src="https://nicods96.github.io/hi/assets/images/news-feed/site-example.png" alt="Website example Image" /> 
The main involved technologies are:</p>
<ul>
  <li>Java + <a href="https://quarkus.io/">Quarkus</a> for the backend, because I was curious to deepen how it works (expecially for the native executable part)</li>
  <li><a href="https://angular.io/">Angular</a> for the front end for the same reason.</li>
</ul>

<h3 id="the-database">The database</h3>
<p>The database layer is a Database-as-a-Service instance from <a href="https://www.mongodb.com/atlas/database">MongoDB</a>. It is deployed in Google Cloud at eu-west-1 and is a free (shared) tier instance.</p>

<h3 id="the-poller">The Poller</h3>
<p>To listen to the feeds I have googled around for a while and I have found an amazing integration framework: <a href="https://camel.apache.org/">Apache Camel</a>. <br />
Camel integration is based on three simple concepts: routes that make a source and a destination communicate, messages to exchange and processors to eventually elaborate messages in the middle. It has also <a href="https://camel.apache.org/camel-quarkus/2.13.x/reference/index.html">quarkus</a> components to support native image compilation, Hibernate and JPA, and so on… :scream: :heart_eyes:. I fell in love with it immediately.  Let’s see the code.
The first class is PollerRoute.java which is the Camel equivalent of the main class:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">io.quarkus.logging.Log</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.camel.builder.RouteBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.eclipse.microprofile.config.inject.ConfigProperty</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.enterprise.context.ApplicationScoped</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.transaction.Transactional</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@ApplicationScoped</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PollerRoute</span> <span class="kd">extends</span> <span class="nc">RouteBuilder</span> <span class="o">{</span>
    <span class="nd">@ConfigProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"pone.feed"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">feedList</span><span class="o">;</span>
    <span class="nd">@ConfigProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"pone.refresh"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">refresh</span><span class="o">;</span>
    <span class="nd">@ConfigProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"pone.refresh.limit"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">refreshLimit</span><span class="o">;</span>
    <span class="nd">@Transactional</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        
        <span class="nc">Log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">feedList</span><span class="o">);</span>
        <span class="n">feedList</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">url</span> <span class="o">-&gt;{</span>
            <span class="n">from</span><span class="o">(</span><span class="s">"rss:"</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">"?alt=rss&amp;splitEntries=false&amp;delay="</span><span class="o">+</span><span class="n">refresh</span><span class="o">+</span><span class="s">"&amp;repeatCount="</span><span class="o">+</span><span class="n">refreshLimit</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="k">new</span> <span class="nc">FeedProcessor</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="s">"${body}"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="n">body</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">bean</span><span class="o">(</span><span class="nc">FeedBean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"upsert"</span><span class="o">);</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>The class gets the feed list from the application.properties and for each feed, it gets the entries, parses the entry into a FeedBean object using the FeedProcessor(), and then inserts/updates the entry using a FeedBean method.<br />
The FeedBean class is:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">io.quarkus.mongodb.panache.PanacheMongoEntityBase</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.quarkus.mongodb.panache.common.MongoEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.bson.codecs.pojo.annotations.BsonId</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="nd">@MongoEntity</span><span class="o">(</span><span class="n">collection</span><span class="o">=</span><span class="s">"NewsFeed"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeedBean</span> <span class="kd">extends</span> <span class="nc">PanacheMongoEntityBase</span> <span class="o">{</span>
    <span class="nd">@BsonId</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">authors</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">categories</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">link</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="n">src</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Date</span> <span class="n">date</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Date</span> <span class="n">updateDate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">FeedBean</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">upsert</span><span class="o">(</span><span class="nc">FeedBean</span> <span class="n">f</span><span class="o">){</span>
        <span class="n">f</span><span class="o">.</span><span class="na">persistOrUpdate</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>It extends <a href="https://quarkus.io/guides/mongodb-panache">PanacheMongoEntityBase</a> that is a Quarkus utility to support <a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping">ORM</a> for MongoDB (more or less).<br />
The FeedProcessor is:</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.rometools.rome.feed.synd.SyndCategory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.rometools.rome.feed.synd.SyndEntry</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.rometools.rome.feed.synd.SyndFeed</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.rometools.rome.feed.synd.SyndPerson</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.camel.Exchange</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.camel.Message</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.apache.camel.Processor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeedProcessor</span> <span class="kd">implements</span> <span class="nc">Processor</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">FeedBean</span> <span class="nf">syndEntryToFeedBean</span><span class="o">(</span><span class="nc">SyndEntry</span> <span class="n">entry</span><span class="o">,</span> <span class="nc">String</span> <span class="n">src</span><span class="o">){</span>
        <span class="nc">FeedBean</span> <span class="n">fb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FeedBean</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">authors</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getAuthors</span><span class="o">()</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">SyndPerson:</span><span class="o">:</span><span class="n">getName</span><span class="o">)</span>
                <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">a1</span><span class="o">,</span><span class="n">a2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a1</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">";"</span><span class="o">).</span><span class="na">concat</span><span class="o">(</span><span class="n">a2</span><span class="o">))</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>

        <span class="n">fb</span><span class="o">.</span><span class="na">authors</span> <span class="o">=</span> <span class="n">authors</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()?</span> <span class="n">entry</span><span class="o">.</span><span class="na">getAuthor</span><span class="o">():</span> <span class="n">authors</span><span class="o">;</span>
        <span class="n">fb</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getTitle</span><span class="o">();</span>
        <span class="n">fb</span><span class="o">.</span><span class="na">categories</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getCategories</span><span class="o">()</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">SyndCategory:</span><span class="o">:</span><span class="n">getName</span><span class="o">)</span>
                <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">a1</span><span class="o">,</span><span class="n">a2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a1</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">";"</span><span class="o">).</span><span class="na">concat</span><span class="o">(</span><span class="n">a2</span><span class="o">))</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">""</span><span class="o">);;</span>
        <span class="n">fb</span><span class="o">.</span><span class="na">link</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getLink</span><span class="o">();</span>
        <span class="n">fb</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getPublishedDate</span><span class="o">();</span>
        <span class="n">fb</span><span class="o">.</span><span class="na">updateDate</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getUpdatedDate</span><span class="o">();</span>
        <span class="n">fb</span><span class="o">.</span><span class="na">src</span> <span class="o">=</span> <span class="n">src</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">fb</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">process</span><span class="o">(</span><span class="nc">Exchange</span> <span class="n">exchange</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">Message</span> <span class="n">m</span> <span class="o">=</span> <span class="n">exchange</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
        <span class="nc">SyndFeed</span> <span class="n">f</span> <span class="o">=</span> <span class="o">(</span><span class="nc">SyndFeed</span><span class="o">)</span> <span class="n">m</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">SyndEntry</span><span class="o">&gt;</span> <span class="n">entryList</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getEntries</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">src</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getLink</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FeedBean</span><span class="o">&gt;</span> <span class="n">feedList</span> <span class="o">=</span> <span class="n">entryList</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">entry</span> <span class="o">-&gt;</span> <span class="k">this</span><span class="o">.</span><span class="na">syndEntryToFeedBean</span><span class="o">(</span><span class="n">entry</span><span class="o">,</span> <span class="n">src</span><span class="o">)).</span><span class="na">toList</span><span class="o">();</span>
        <span class="n">exchange</span><span class="o">.</span><span class="na">getMessage</span><span class="o">().</span><span class="na">setBody</span><span class="o">(</span><span class="n">feedList</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>The method <code class="language-plaintext highlighter-rouge">FeedProcessor.syndEntryToFeedBean</code> is a simple converter, it extracts useful info from a <code class="language-plaintext highlighter-rouge">SyndEntry</code> object and converts them into a <code class="language-plaintext highlighter-rouge">FeedBean</code> instance.</p>

<h3 id="the-api">The API</h3>
<p>The API is so simple that there is no need to detail. It executes a paginated query using the FeedBean we have seen above and returns the latest articles. It can also return the maximum number of pages so that the UI will know it.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">io.quarkus.logging.Log</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.quarkus.panache.common.Page</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.quarkus.panache.common.Sort</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.quarkus.runtime.StartupEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.eclipse.microprofile.config.inject.ConfigProperty</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.enterprise.event.Observes</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.ws.rs.GET</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.ws.rs.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.ws.rs.Produces</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.ws.rs.core.MediaType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="nd">@Path</span><span class="o">(</span><span class="s">"feeds"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeedResource</span> <span class="o">{</span>
    <span class="nd">@ConfigProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"news.aggregator.page.size"</span><span class="o">)</span>
    <span class="nc">Integer</span> <span class="n">pageSize</span><span class="o">;</span>
    <span class="nc">Integer</span> <span class="n">pageSizeDefault</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
    <span class="nd">@ConfigProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"quarkus.mongodb.connection-string"</span><span class="o">)</span>
    <span class="nc">String</span> <span class="n">mongoString</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">onStart</span><span class="o">(</span><span class="nd">@Observes</span> <span class="nc">StartupEvent</span> <span class="n">ev</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"The mongo string is: "</span> <span class="o">+</span> <span class="n">mongoString</span><span class="o">);</span>
        <span class="nc">Log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Page size is: "</span> <span class="o">+</span> <span class="n">pageSize</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GET</span>
    <span class="nd">@Path</span><span class="o">(</span><span class="s">"/{idx}"</span><span class="o">)</span>
    <span class="nd">@Produces</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FeedBean</span><span class="o">&gt;</span> <span class="nf">getPage</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Integer</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">pageSize</span> <span class="o">==</span> <span class="kc">null</span><span class="o">?</span> <span class="n">pageSizeDefault</span> <span class="o">:</span> <span class="n">pageSize</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">FeedBean</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">by</span><span class="o">(</span><span class="s">"date"</span><span class="o">,</span> <span class="s">"updateDate"</span><span class="o">).</span><span class="na">descending</span><span class="o">()).</span><span class="na">page</span><span class="o">(</span><span class="nc">Page</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">idx</span><span class="o">,</span> <span class="n">ps</span><span class="o">)).</span><span class="na">list</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@GET</span>
    <span class="nd">@Path</span><span class="o">(</span><span class="s">"/pages"</span><span class="o">)</span>
    <span class="nd">@Produces</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getNumberOfPagse</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Integer</span> <span class="n">ps</span> <span class="o">=</span> <span class="n">pageSize</span> <span class="o">==</span> <span class="kc">null</span><span class="o">?</span> <span class="n">pageSizeDefault</span> <span class="o">:</span> <span class="n">pageSize</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">floor</span><span class="o">(</span><span class="nc">FeedBean</span><span class="o">.</span><span class="na">count</span><span class="o">()/</span><span class="n">ps</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Ta-Daaaa with less than 200 LOC we have a completely working backend.</p>

<h3 id="the-webapp">The WebApp</h3>
<p>The frontend is an Angular app made responsive using <a href="getbootstrap.com/">bootstrap</a>. I won’t show the whole code since it is very minimal (you can see it on <a href="https://github.com/nicoDs96/tech-news-daily/tree/master/news-html">GitHub</a>). The app is made of two components: one that shows the articles and one that requests pages. 
<img class="image" src="https://nicods96.github.io/hi/assets/images/news-feed/component.png" alt="Angular Components" /> 
The core of the app is the IndexService, which keeps track of the page the user is visiting.</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@angular/core</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">BehaviorSubject</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">rxjs</span><span class="dl">'</span><span class="p">;</span>

<span class="p">@</span><span class="nd">Injectable</span><span class="p">({</span>
  <span class="na">providedIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">root</span><span class="dl">'</span>
<span class="p">})</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">IndexService</span> <span class="p">{</span>
  <span class="nl">idx</span><span class="p">:</span> <span class="nx">BehaviorSubject</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">;</span>
  
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">idx</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BehaviorSubject</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">next</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">idx</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">idx</span><span class="p">.</span><span class="nx">getValue</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">prev</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">idx</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">idx</span><span class="p">.</span><span class="nx">getValue</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="nx">goto</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="kr">number</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">idx</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The current page number (idx in the code) is observed from the components to update the data each time the value changes:</p>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">export</span> <span class="kd">class</span> <span class="nx">ListComponent</span> <span class="k">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
  <span class="nl">feedList</span><span class="p">:</span> <span class="nx">Feed</span><span class="p">[];</span>
  <span class="nl">index</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="k">private</span> <span class="nx">http</span><span class="p">:</span> <span class="nx">HttpClient</span><span class="p">,</span> <span class="k">private</span> <span class="nx">idxService</span><span class="p">:</span> <span class="nx">IndexService</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">feedList</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">ngOnInit</span><span class="p">():</span> <span class="k">void</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">idxService</span><span class="p">.</span><span class="nx">idx</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="o">&lt;</span><span class="nx">Feed</span> <span class="p">[]</span><span class="o">&gt;</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">environment</span><span class="p">.</span><span class="nx">endpoint</span><span class="p">}</span><span class="s2">/feeds/</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="nx">feeds</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">feedList</span> <span class="o">=</span> <span class="nx">feeds</span><span class="p">);</span>
    <span class="p">})</span>
  <span class="p">}</span>

  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="deploy">Deploy</h2>
<h3 id="webapp">WebApp</h3>
<p>To deploy the solution I have decided to use <a href="https://pages.github.com/">GitHubPages</a> for the Web App. The steps to build are simple:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ng build <span class="nt">--configuration</span><span class="o">=</span>production
</code></pre></div></div>
<p>then push the file into the project home. One note about Angular build: it generates an index.html where the js scripts are imported with module type</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"main.3cc1e1de394d1b26.js"</span> <span class="na">type=</span><span class="s">"module"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>
<p>to be properly served from GitHub Pages they must be of type <code class="language-plaintext highlighter-rouge">application/javascript</code>:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"main.3cc1e1de394d1b26.js"</span> <span class="na">type=</span><span class="s">"application/javascript"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>
<h3 id="the-poller-1">The Poller</h3>
<p>The poller is a very lightweight process that runs every minute, so I let it run on my PC that is on 12 hours a day. I have first created an uber jar, using the Quarkus utilities:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mvnw package <span class="nt">-Dquarkus</span>.package.type<span class="o">=</span>uber-jar
</code></pre></div></div>
<p>Then I have containerized the app with</p>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> registry.access.redhat.com/ubi8/openjdk-17:1.11</span>
<span class="k">ENV</span><span class="s"> LANGUAGE='en_US:en'</span>
<span class="k">COPY</span><span class="s"> --chown=185 target/*-runner.jar /deployments/</span>
<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">USER</span><span class="s"> 185</span>
<span class="k">ENV</span><span class="s"> JAVA_OPTS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"</span>
<span class="k">ENV</span><span class="s"> JAVA_APP_JAR="/deployments/*-runner.jar"</span>
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-f</span> .<span class="se">\s</span>rc<span class="se">\m</span>ain<span class="se">\d</span>ocker<span class="se">\D</span>ockerfile.uberjar <span class="nb">.</span>
</code></pre></div></div>
<p>Instead of pushing it to some registry, I have exported it using</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker save <span class="nt">--output</span> poller.container &lt;container_id&gt;
</code></pre></div></div>
<p>Loaded into the final machine with</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker load <span class="nt">--input</span> poller.container
</code></pre></div></div>
<p>And, set it to run automatically at startup</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--restart</span> always &lt;image&gt;
</code></pre></div></div>

<h3 id="the-api-1">The API</h3>
<p>The API is running on <a href="https://cloud.google.com/run?hl=it">Google Cloud Runner</a>, which is the serverless solution for the endpoint suggested by Google, it is like a lambda and it has 2 milly free calls every month. Not bad for a broke developer :grin:. 
Building the API code is where the magic happens: Quarkus, with the support of <a href="https://www.graalvm.org/">GraalVM</a> let you transform Java Code into a native executable. If you have Docker installed you do not have to configure anything, you can run</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvnw package <span class="nt">-Pnative</span> <span class="nt">-Dquarkus</span>.native.container-build<span class="o">=</span><span class="nb">true</span>
</code></pre></div></div>
<p>And you have a perfectly running x64 Linux native image. To deploy it to Google Cloud Run you need an account, a  project, and the Google Cloud CLI installed. Then you can simply containerize the image and push it into the Google Registry:</p>
<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> quay.io/quarkus/quarkus-micro-image:1.0</span>
<span class="k">WORKDIR</span><span class="s"> /work/</span>
<span class="k">RUN </span><span class="nb">chown </span>1001 /work <span class="se">\
</span>    <span class="o">&amp;&amp;</span> <span class="nb">chmod</span> <span class="s2">"g+rwX"</span> /work <span class="se">\
</span>    <span class="o">&amp;&amp;</span> <span class="nb">chown </span>1001:root /work
<span class="k">COPY</span><span class="s"> --chown=1001:root target/*-runner /work/application</span>

<span class="k">EXPOSE</span><span class="s"> 8080</span>
<span class="k">USER</span><span class="s"> 1001</span>

<span class="k">CMD</span><span class="s"> ["./application", "-Dquarkus.http.host=0.0.0.0"]</span>
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker tag &lt;image&gt; gcr.io/&lt;project <span class="nb">id</span><span class="o">&gt;</span>/endpoint
</code></pre></div></div>
<p>And now you can use the Cloud Run panel to select the container as the image to run.
<img class="image" src="https://nicods96.github.io/hi/assets/images/news-feed/GCRun.png" alt="Google Cloud Run Dash" /> 
The key role of the native image here is the fast startup of the API service, which plays a key role in the responsiveness of the serverless solution:
<code class="language-plaintext highlighter-rouge">2022-10-21 11:06:40,514 INFO  [io.quarkus] (main) news-aggregator 0.0.1 native (powered by Quarkus 2.13.2.Final) started in 0.286s. Listening on: http://0.0.0.0:8080</code></p>

<h2 id="how-to-deploy-your-own">How to deploy your own</h2>
<p>If you want to use the code to build your news aggregation website, here is the step you need to follow.</p>
<ol>
  <li>Fork the <a href="https://github.com/nicoDs96/tech-news-daily">repo</a> and enable GitHub Pages.</li>
  <li>Create an Atlas MongoDB cluster following the procedure on the <a href="https://www.mongodb.com/atlas/database">website</a>
    <ul>
      <li>create a database named Feeds</li>
      <li>creare a collection named NewsFeed</li>
    </ul>
  </li>
  <li>Once you have an instance up and running, copy the connection string and paste it into <code class="language-plaintext highlighter-rouge">feed-poller/src/main/resources/application.properties</code> and <code class="language-plaintext highlighter-rouge">news-aggregator/src/main/resources/application.properties</code></li>
  <li>Set your own feeds into <code class="language-plaintext highlighter-rouge">feed-poller/src/main/resources/application.properties</code></li>
  <li>Run everything locally to see if it works
    <ul>
      <li>start the poller in dev mode (<code class="language-plaintext highlighter-rouge">cd feed-poller &amp;&amp; quarkus dev</code>)</li>
      <li>start the API in dev mode (<code class="language-plaintext highlighter-rouge">cd news-aggregator &amp;&amp; quarkus dev</code>)</li>
      <li>serve the webapp (<code class="language-plaintext highlighter-rouge">cd news-html &amp;&amp; ng serve</code>)</li>
    </ul>
  </li>
  <li>Follow the deployment steps detailed previously to make the website available to the public.</li>
</ol>

<h2 id="now-what">Now what?</h2>
<p>The project was really useful to deepen some interesting frameworks I was curious about. I think it has also the potential to become something more complex and interesting, for example adding support for users, allowing different users to have custom feeds, exposing common feeds to a subset of users, adding push notifications, distribution lists etc. 
To extend it, an effort is required but resources are constrained so, for now, it will remain a funny weekend project, hosted until it will be free.</p>]]></content><author><name>nicods</name></author><category term="project" /><category term="Angular" /><category term="Quarkus" /><category term="Serverless" /><category term="Google Cloud Run" /><category term="Mongo DB" /><category term="RSS" /><category term="Atom" /><summary type="html"><![CDATA[A step-by-step journey into building a custom news feed with Angular, Quarkus, and MongoDB and deploying it to Google Cloud, for free!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/news-feed/cover.png" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/news-feed/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Fast Document Similarity In Python with Minhash Locality Sensitive Hashing (MinHashLSH)</title><link href="https://nicods96.github.io/hi/fast-document-similarity-in-python/" rel="alternate" type="text/html" title="Fast Document Similarity In Python with Minhash Locality Sensitive Hashing (MinHashLSH)" /><published>2022-09-08T18:00:00+00:00</published><updated>2022-09-08T18:00:00+00:00</updated><id>https://nicods96.github.io/hi/fast-document-similarity-in-python</id><content type="html" xml:base="https://nicods96.github.io/hi/fast-document-similarity-in-python/"><![CDATA[<!-- USED TO EXPORT MATH FORMULAS IN PDF FROM MARKDOWN

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({ tex2jax: {inlineMath: [['$', '$']]}, messageStyle: "none" });
</script> -->

<!--<img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/cover.png" alt="Cover Image"/>-->
<p>In the big data era, it is always more frequent that companies need to detect similar items in their database. Imagine platforms like <a href="https://www.kijiji.it/">Kijiji</a> or <a href="https://www.subito.it/">Subito</a>, trying to detect people that constantly duplicate announcements on the platform to boost their visibility without paying for sponsorship offered by the platform.
Assume for example the platform has 1000000 announcements and it wants to detect duplicates. If we try to check one by one all the pairs we need to check 499999500000 (half a trillion) pairs. If it takes a microsecond (0.000001 s) to check a pair, it would take 499999 seconds, that are approximately six days of computation. 
In this article, we are going to explore data mining techniques to speed up the whole process. The whole algorithm is inspired by <a href="http://www.mmds.org/#ver21">chapter 3 of the book “Mining of Massive Datasets”</a>.</p>

<h1 id="dataset">Dataset</h1>
<p>In this guide we will use some announcements of the house for rent in Rome scraped from <a href="https://www.kijiji.it/">Kijiji</a> a few years ago. You can download it from <a href="https://github.com/nicoDs96/Document-Similarity-using-Python-and-PySpark/blob/master/LSH/dataset_rent_rome_kijiji.tsv">here</a>.
The file is a tsv file with header:</p>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Short Description</th>
      <th>Location</th>
      <th>Price (Euro)</th>
      <th>Timestamp</th>
      <th>Url Adv</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Studio accessoria…</td>
      <td>Affitto studio a …</td>
      <td>Roma</td>
      <td>450</td>
      <td>12 ottobre, 11:32</td>
      <td>https://www.kijij…</td>
    </tr>
    <tr>
      <td>Negozio 169Mq per…</td>
      <td>Privato affitta n…</td>
      <td>Prenestino / Casi…</td>
      <td>1.700</td>
      <td>12 ottobre, 08:45</td>
      <td>https://www.kijij…</td>
    </tr>
    <tr>
      <td>Negozio in tiburt…</td>
      <td>Negozio c/1 roma …</td>
      <td>Tiburtino / Colla…</td>
      <td>6.000</td>
      <td>17 October, 21:20</td>
      <td>https://www.kijij…</td>
    </tr>
    <tr>
      <td>Studio medico via…</td>
      <td>Studio medico avv…</td>
      <td>Trieste / Somalia…</td>
      <td>200</td>
      <td>17 October, 20:22</td>
      <td>https://www.kijij…</td>
    </tr>
  </tbody>
</table>

<p>To read the <a href="https://github.com/nicoDs96/Document-Similarity-using-Python-and-PySpark/blob/master/LSH/dataset_rent_rome_kijiji.tsv">dataset</a> we use the <a href="https://pandas.pydata.org/">pandas</a> library:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">dataset</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"dataset_rent_rome_kijiji.tsv"</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>
<h1 id="in-brief">In brief</h1>
<p>In the following section we are going to see:</p>
<ol>
  <li>how to transform a document into a set using k-shingling</li>
  <li>how to represent a set in a compressed way computing its signature in such a way that set similarity is preserved, using MinHashing.</li>
  <li>how to implement a hashing function that hashes similar items in the same bucket, using LSH (locality-sensitive hashing).</li>
</ol>

<h1 id="shingling-of-document">Shingling of Document</h1>
<p>In literature, representing documents as sets is considered an effective way to identify lexically similar documents. The <a href="https://en.wikipedia.org/wiki/W-shingling">k-shingles</a> method represents a document as a set of the substrings of length k. 
For example, if your document is ‘I love pizza Margherita, a 6-shingle representation of the document based on characters, including spaces, can be <code class="language-plaintext highlighter-rouge">{'I love', ' love ', 'love p', 'ove pi', ...}</code>. According to the use case, you can compose shingles of words instead of characters or eliminate whitespaces and others.
In Python, we can implement a class that, given the parameter k and a document read into a string, returns the k-shingle set of a document:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">shingler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">k</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">k</span> <span class="o">=</span> <span class="mi">10</span>   
    <span class="c1">#inner class utility
</span>    <span class="k">def</span> <span class="nf">process_doc</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">document</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="s">"( )+|(</span><span class="se">\n</span><span class="s">)+"</span><span class="p">,</span><span class="s">" "</span><span class="p">,</span><span class="n">document</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">get_shingles</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">document</span><span class="p">):</span>
        <span class="n">shingles</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">document</span><span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">process_doc</span><span class="p">(</span><span class="n">document</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span> <span class="p">):</span>
            <span class="n">shingles</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">document</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="bp">self</span><span class="p">.</span><span class="n">k</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">shingles</span>
</code></pre></div></div>
<p>And use it as follows:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">doc</span> <span class="o">=</span> <span class="s">"I love pizza Margherita!                     xd 1111@</span><span class="se">\n\n\n\n\n\n\n\n\n\n\n\n\n\n</span><span class="s">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shingler_instance</span> <span class="o">=</span> <span class="n">shingler</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shingles_set</span> <span class="o">=</span> <span class="n">shingler_instance</span><span class="p">.</span><span class="n">get_shingles</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shingles_set</span>
<span class="p">{</span><span class="s">' xd 1111@ '</span><span class="p">,</span> <span class="s">'herita! xd'</span><span class="p">,</span> <span class="s">'izza margh'</span><span class="p">,</span> <span class="s">'e pizza ma'</span><span class="p">,</span> <span class="s">'rgherita! '</span><span class="p">,</span> <span class="s">'ta! xd 111'</span><span class="p">,</span> <span class="s">'ita! xd 11'</span><span class="p">,</span> <span class="s">' pizza mar'</span><span class="p">,</span> <span class="s">'argherita!'</span><span class="p">,</span> <span class="s">'rita! xd 1'</span><span class="p">,</span> <span class="s">'zza marghe'</span><span class="p">,</span> <span class="s">'a! xd 1111'</span><span class="p">,</span> <span class="s">'a margheri'</span><span class="p">,</span> <span class="s">' love pizz'</span><span class="p">,</span> <span class="s">'erita! xd '</span><span class="p">,</span> <span class="s">'love pizza'</span><span class="p">,</span> <span class="s">'za margher'</span><span class="p">,</span> <span class="s">'margherita'</span><span class="p">,</span> <span class="s">'gherita! x'</span><span class="p">,</span> <span class="s">' margherit'</span><span class="p">,</span> <span class="s">'i love piz'</span><span class="p">,</span> <span class="s">'pizza marg'</span><span class="p">,</span> <span class="s">'ve pizza m'</span><span class="p">,</span> <span class="s">'ove pizza '</span><span class="p">,</span> <span class="s">'! xd 1111@'</span><span class="p">}</span>
</code></pre></div></div>
<p>Now we can check if two documents are similar using the Jaccard Similarity, a popular set similarity indicator:
\(J(s1, s2) = \frac{|s1 \cap s2|}{|s1 \cup s2|}\)</p>

<p>In general, we might want to hash shingles to reduce their size, but even by hashing, they can take in a mean 4 times the size of the original document. So “what’s the point?” you might think. Let me introduce you to MinHashing.</p>

<h1 id="minhash---the-signature-of-a-set">Minhash - The signature of a set</h1>
<p>The minash of a set can be seen as its signature, which is a unique and short representation of the set with a fixed length. The magic of MinHashing for a set is that it preserves Jaccard similarity (more or less).</p>

<p>We can represent a set with its characteristic matrix: a matrix whose columns are sets and rows are elements. The matrix contains a 1 in all the cells that correspond to an element contained in a set.
For example:<br />
S1 = {a, b}, S2 = {a, c} S3 = {a,b,c,d}</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>S1</th>
      <th>S2</th>
      <th>S3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>b</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>c</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>d</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<p>Ideally, the minhash function takes a random permutation of the rows and for each set return the first element with a 1 in the characteristic matrix with permuted rows:
if the permutation is <code class="language-plaintext highlighter-rouge">badc</code>, the characteristic matrix is</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>S1</th>
      <th>S2</th>
      <th>S3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>b</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>a</td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>d</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>c</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
    </tr>
  </tbody>
</table>

<p>and the minhash values are<br />
Minhash(S1) = b<br />
Minhash(S2) = a<br />
Minhash(S3) = b</p>

<p>We obtain a signature of size n for the set if we compute minhash for n random permutations of the rows of the characteristic matrix.</p>

<h3 id="minhash-in-practice">Minhash in practice</h3>
<p>The permutation approach is not feasible in practice, hence once again we use hash functions to approximate. We define a family of hash functions as</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">hashlib</span>
<span class="c1"># the family of hash functions, in this case, is the same function (sha1) applied with a different salt.
</span><span class="k">class</span> <span class="nc">hashFamily</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">resultSize</span> <span class="o">=</span> <span class="mi">8</span> <span class="c1"># how many bytes we want back
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">maxLen</span> <span class="o">=</span> <span class="mi">20</span> <span class="c1"># how long can our salt be (in decimal)
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">salt</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">zfill</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">maxLen</span><span class="p">)[</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">maxLen</span><span class="p">:]</span>
        
    <span class="k">def</span> <span class="nf">get_hash_value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">el_to_hash</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="n">sha1</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">el_to_hash</span><span class="p">).</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">salt</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">)).</span><span class="n">hexdigest</span><span class="p">()[</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">resultSize</span><span class="p">:],</span> <span class="mi">16</span><span class="p">)</span>
    
<span class="c1"># NOTE: we use sha1 to avoid installing and importing an external library, sacrificing performances. No crypto-hash is required for this use case.
</span></code></pre></div></div>
<p>Then we compute a minhash signature for a set with the following algorithm:</p>
<ol>
  <li>Take the first hash function, and apply it to all of the shingle values in a document. Find the minimum hash value produced and use it as the first component of the MinHash signature.</li>
  <li>Now take the second hash function, and again find the minimum resulting hash value, and use this as the second component.</li>
  <li>And so on…</li>
</ol>

<p>So if we have 10 random hash functions, we’ll get a MinHash signature with 10 values for each set. We’ll use the same 10 hash functions for every document in the dataset and generate their signatures as well.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span><span class="p">,</span> <span class="n">seed</span>
<span class="k">class</span> <span class="nc">minhashSigner</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sig_size</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sig_size</span><span class="o">=</span><span class="n">sig_size</span>
        <span class="c1"># Init the hash family of functions using a random salt
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">hash_functions</span> <span class="o">=</span> <span class="p">[</span><span class="n">hashFamily</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10000000000</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">sig_size</span><span class="p">)]</span>
    
    <span class="k">def</span> <span class="nf">compute_set_signature</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">set_</span><span class="p">):</span>
        <span class="n">set_sig</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">h_funct</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">.</span><span class="n">hash_functions</span><span class="p">:</span>
            <span class="n">min_hash</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">inf</span>
            <span class="k">for</span> <span class="n">el</span> <span class="ow">in</span> <span class="n">set_</span><span class="p">:</span>
                <span class="n">h</span> <span class="o">=</span> <span class="n">h_funct</span><span class="p">.</span><span class="n">get_hash_value</span><span class="p">(</span><span class="n">el</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">min_hash</span><span class="p">:</span>
                    <span class="n">min_hash</span> <span class="o">=</span> <span class="n">h</span>
                
            <span class="n">set_sig</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">min_hash</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">set_sig</span>
    <span class="c1">#return a list of lists that can be seen as the signature matrix
</span>    <span class="k">def</span> <span class="nf">compute_signature_matrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">set_list</span><span class="p">):</span>
        <span class="n">signatures</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">set_list</span><span class="p">:</span>
            <span class="n">signatures</span><span class="p">.</span><span class="n">append</span><span class="p">(</span> <span class="bp">self</span><span class="p">.</span><span class="n">compute_set_signature</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">)</span>
        <span class="k">return</span> <span class="n">signatures</span>
</code></pre></div></div>
<p>Example usage:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">doc</span> <span class="o">=</span> <span class="s">"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">doc2</span> <span class="o">=</span> <span class="s">"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident bla bla bla."</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shingler_inst</span> <span class="o">=</span> <span class="n">shingler</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shinglings</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_shingles</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shinglings2</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_shingles</span><span class="p">(</span><span class="n">doc2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">minhash_sig</span> <span class="o">=</span> <span class="n">minhashSigner</span><span class="p">(</span><span class="mi">20</span><span class="p">).</span><span class="n">compute_signature_matrix</span><span class="p">([</span><span class="n">shinglings</span><span class="p">,</span><span class="n">shinglings2</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">minhash_sig</span>
<span class="p">[[</span><span class="mi">1783860</span><span class="p">,</span> <span class="mi">5303198</span><span class="p">,</span> <span class="mi">4845898</span><span class="p">,</span> <span class="mi">3935831</span><span class="p">,</span> <span class="mi">198103</span><span class="p">,</span> <span class="mi">5887007</span><span class="p">,</span> <span class="mi">8061377</span><span class="p">,</span> <span class="mi">4526224</span><span class="p">,</span> <span class="mi">8467452</span><span class="p">,</span> <span class="mi">7766250</span><span class="p">,</span> <span class="mi">15505788</span><span class="p">,</span> <span class="mi">825368</span><span class="p">,</span> <span class="mi">12316643</span><span class="p">,</span> <span class="mi">4502308</span><span class="p">,</span> <span class="mi">6403903</span><span class="p">,</span> <span class="mi">9259449</span><span class="p">,</span> <span class="mi">8533874</span><span class="p">,</span> <span class="mi">31889076</span><span class="p">,</span> <span class="mi">940623</span><span class="p">,</span> <span class="mi">278359</span><span class="p">],</span> <span class="p">[</span><span class="mi">1783860</span><span class="p">,</span> <span class="mi">20203690</span><span class="p">,</span> <span class="mi">4845898</span><span class="p">,</span> <span class="mi">3935831</span><span class="p">,</span> <span class="mi">198103</span><span class="p">,</span> <span class="mi">12350289</span><span class="p">,</span> <span class="mi">8061377</span><span class="p">,</span> <span class="mi">4526224</span><span class="p">,</span> <span class="mi">8467452</span><span class="p">,</span> <span class="mi">7766250</span><span class="p">,</span> <span class="mi">15505788</span><span class="p">,</span> <span class="mi">825368</span><span class="p">,</span> <span class="mi">12316643</span><span class="p">,</span> <span class="mi">6122847</span><span class="p">,</span> <span class="mi">6403903</span><span class="p">,</span> <span class="mi">9259449</span><span class="p">,</span> <span class="mi">8533874</span><span class="p">,</span> <span class="mi">31889076</span><span class="p">,</span> <span class="mi">940623</span><span class="p">,</span> <span class="mi">278359</span><span class="p">]]</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">set_sig_1</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">minhash_sig</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">set_sig_2</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">minhash_sig</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jaccard_similarity_sig</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">set_sig_1</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">set_sig_2</span><span class="p">))</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">set_sig_1</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="n">set_sig_2</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jaccard_similarity_sig</span>
<span class="mf">0.7391304347826086</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jaccard_similarity_shingle_set</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">shinglings</span><span class="p">).</span><span class="n">intersection</span><span class="p">(</span><span class="n">shinglings2</span><span class="p">))</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">shinglings</span><span class="p">).</span><span class="n">union</span><span class="p">(</span><span class="n">shinglings2</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">jaccard_similarity_shingle_set</span>
<span class="mf">0.8285077951002228</span>
</code></pre></div></div>
<p>From the example, we can see that the Jaccard similarity between set signatures is near to the similarity between shingle sets. Of course, we can achieve a lower approximation error by tuning the shingle size and signature size.</p>

<h1 id="locality-sensitive-hashing">Locality Sensitive Hashing</h1>
<p>Quoting <a href="http://www.mmds.org/#ver21">“Mining of Massive Datasets”</a></p>
<blockquote>
  <p>Locality-sensitive hashing (also known as near-neighbor search) is a general theory focused on how to approximatively find similar pairs without investigating all of them. The principle is that we are going to hash items several times in such a way that similar items are more likely to be hashed to the same bucket than dissimilar items are.
When you have a minhashed set a popular choice for LSH is the “banding technique”, that is:</p>
  <ol>
    <li>get the signature matrix and divide it into bands</li>
    <li>hash each column of the band. The elements that hash to the same bucket are likely to be similar.</li>
    <li>repeat for all the bands. You can use the same hash function of the previous band but you must use different buckets.</li>
  </ol>
</blockquote>

<!--image here -->
<p>In python:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">lsh</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.8</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">threshold</span> <span class="o">=</span> <span class="n">threshold</span>
    <span class="k">def</span> <span class="nf">get_signature_matrix_bands</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sig_matrix</span><span class="p">,</span> <span class="n">bands_nr</span><span class="p">,</span> <span class="n">sign_len</span><span class="p">):</span> 
        <span class="c1">#bands_nr = b
</span>        <span class="c1">#sign_len = n
</span>        <span class="n">r</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sign_len</span><span class="o">/</span><span class="n">bands_nr</span><span class="p">)</span> <span class="c1">#number of rows in each band
</span>        <span class="n">bands</span> <span class="o">=</span> <span class="p">{}</span> <span class="c1"># {band_nr: [col_1,col_2,...]} where col_1 is all the values of Sig(S_i) for band b.
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">bands_nr</span><span class="p">):</span>
            <span class="n">bands</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># put Subsets of the columns of signature matrix into the appropriate bucket and cosider a column 
</span>        <span class="c1"># as a unique block so that we can hash the entire column.
</span>        <span class="c1"># Basically a band is a list of element, where each element is a subset of a signature of a given set.
</span>        <span class="k">for</span> <span class="n">signature</span> <span class="ow">in</span> <span class="n">sig_matrix</span><span class="p">:</span> 
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">bands_nr</span><span class="p">):</span>
                <span class="n">idx</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">r</span>    
                <span class="n">bands</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">signature</span><span class="p">[</span><span class="n">idx</span><span class="p">:</span><span class="n">idx</span><span class="o">+</span><span class="n">r</span><span class="p">])</span> <span class="p">)</span>          
        <span class="k">return</span> <span class="n">bands</span>
    <span class="c1">#band is a list 
</span>    <span class="c1"># construct a dictionary {hash(band_column): doc_id that produced this hash}
</span>    <span class="k">def</span> <span class="nf">get_band_buckets</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">band</span><span class="p">,</span> <span class="n">hash_funct</span><span class="p">):</span>
        <span class="n">buckets</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">doc_id</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">band</span><span class="p">)):</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">hash_funct</span><span class="p">.</span><span class="n">get_hash_value</span><span class="p">(</span> <span class="n">band</span><span class="p">[</span><span class="n">doc_id</span><span class="p">]</span> <span class="p">)</span>
            <span class="k">if</span> <span class="n">value</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">:</span>
                <span class="n">buckets</span><span class="p">[</span><span class="n">value</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">doc_id</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">buckets</span><span class="p">[</span><span class="n">value</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">doc_id</span><span class="p">)</span>      
        <span class="k">return</span> <span class="n">buckets</span>
    <span class="k">def</span> <span class="nf">get_candidates_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">buckets</span><span class="p">):</span>
        <span class="n">candidates</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="c1"># buckets is a dictionary containing key=bucket, value= list of doc_ids that hashed to bucket
</span>        <span class="k">for</span> <span class="n">bucket</span><span class="p">,</span><span class="n">candidate_list</span> <span class="ow">in</span> <span class="n">buckets</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">candidate_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">candidate_list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">candidate_list</span><span class="p">)):</span>  
                        <span class="n">pair</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span> <span class="p">(</span><span class="n">candidate_list</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">candidate_list</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">))</span>
                        <span class="n">candidates</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">pair</span><span class="p">)</span>
                
        <span class="k">return</span> <span class="n">candidates</span> <span class="c1">#ie a set of couples, each couple is a candidate pair
</span>    <span class="k">def</span> <span class="nf">check_candidates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">candidates_list</span><span class="p">,</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">sigs</span><span class="p">):</span>
        <span class="n">similar_docs</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span> <span class="c1">#set of tuples
</span>        <span class="c1"># similar_pair is a couple containing doc_ids of documents that hashed to same bucket
</span>        <span class="k">for</span>  <span class="n">similar_pair</span> <span class="ow">in</span> <span class="n">candidates_list</span><span class="p">:</span>
            <span class="c1">#for all the pairs of document in the list check similarity of their signatures
</span>            <span class="n">doc_id_1</span> <span class="o">=</span> <span class="n">similar_pair</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">doc_id_2</span> <span class="o">=</span> <span class="n">similar_pair</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">signature_1</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">sigs</span><span class="p">[</span><span class="n">doc_id_1</span><span class="p">])</span> <span class="c1">#get the i-th column from signature matrix where i is doc_id in the collision list
</span>            <span class="n">signature_2</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">sigs</span><span class="p">[</span><span class="n">doc_id_2</span><span class="p">])</span>
            <span class="n">js</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">signature_1</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">signature_2</span><span class="p">))</span> <span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">signature_1</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="n">signature_2</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">js</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">:</span>
                <span class="n">similar_docs</span><span class="p">.</span><span class="n">add</span><span class="p">(</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">sorted</span><span class="p">((</span><span class="n">doc_id_1</span><span class="p">,</span><span class="n">doc_id_2</span><span class="p">)</span> <span class="p">))</span> <span class="p">)</span>          
        <span class="k">return</span> <span class="n">similar_docs</span>
    <span class="k">def</span> <span class="nf">get_similar_items</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sig_matrix</span><span class="p">,</span> <span class="n">bands_nr</span><span class="p">,</span> <span class="n">sign_len</span><span class="p">):</span>
        <span class="n">similar_docs</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="c1">#divide signature matrix into bands
</span>        <span class="n">bands</span> <span class="o">=</span> <span class="n">lsh_instance</span><span class="p">.</span><span class="n">get_signature_matrix_bands</span><span class="p">(</span><span class="n">sig_matrix</span><span class="p">,</span><span class="n">bands_nr</span><span class="p">,</span><span class="n">sign_len</span><span class="p">)</span>
        <span class="c1">#for all the bands
</span>        <span class="k">for</span> <span class="n">band_id</span><span class="p">,</span> <span class="n">elements</span> <span class="ow">in</span> <span class="n">bands</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="c1">#produce the buckets for the given band (band_id) with a random hash function
</span>            <span class="n">buckets</span> <span class="o">=</span> <span class="n">lsh_instance</span><span class="p">.</span><span class="n">get_band_buckets</span><span class="p">(</span><span class="n">elements</span><span class="p">,</span> <span class="n">hash_funct</span><span class="o">=</span><span class="n">hashFamily</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10000000000</span><span class="p">)))</span>
            <span class="c1">#Get all the candidate pairs
</span>            <span class="n">candidates</span> <span class="o">=</span> <span class="n">lsh_instance</span><span class="p">.</span><span class="n">get_candidates_list</span><span class="p">(</span><span class="n">buckets</span><span class="p">)</span>
            <span class="c1">#Check all candidate pairs' signatures
</span>            <span class="k">for</span> <span class="n">sim_tuple</span> <span class="ow">in</span> <span class="n">lsh_instance</span><span class="p">.</span><span class="n">check_candidates</span><span class="p">(</span><span class="n">candidates</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">threshold</span><span class="p">,</span> <span class="n">sig_matrix</span><span class="p">):</span>
                <span class="n">similar_docs</span><span class="p">.</span><span class="n">add</span><span class="p">(</span> <span class="n">sim_tuple</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">similar_docs</span> <span class="c1">#return all the similar signatures that respect the threshold
</span></code></pre></div></div>
<p>The class performs the following tasks:</p>

<ol>
  <li>Divide signature matrix into bands with <code class="language-plaintext highlighter-rouge">get_signature_matrix_bands(sig_matrix, bands_nr, sign_len)</code>. The method will return a list of strings where each string represents a column of the signature matrix for the given band. It is done to hash the entire column next when producing buckets.</li>
  <li>Compute buckets for each band with <code class="language-plaintext highlighter-rouge">get_band_buckets(band, hash_funct)</code>, which will take as input a band <code class="language-plaintext highlighter-rouge">b</code> and a hash function <code class="language-plaintext highlighter-rouge">h</code> and will return a dict containing as key the bucket ids and as value a list of document ids that hashed to that bucket for the given band <code class="language-plaintext highlighter-rouge">b</code>: ${bucket_{id}:[doc_i, doc_k, …] } $.</li>
  <li>With <code class="language-plaintext highlighter-rouge">get_candidates_list(buckets)</code> we are going to take as input a list of buckets (whose union is the signature matrix) and will produce as output a set of tuples: those tuples represent documents that are hashed in the same bucket.</li>
  <li>With <code class="language-plaintext highlighter-rouge">check_candidates(candidates_list, threshold, sigs)</code> we take all the candidates from all the bands and check if effectively their signatures produce a match with approximate Jaccard similarity greater than the threshold we give as a parameter.</li>
  <li>With <code class="language-plaintext highlighter-rouge">get_similar_items(sig_matrix, bands_nr, sign_len)</code> we put together all the methods listed above and return the ids of similar documents that respect the threshold value.</li>
</ol>

<p>The similarity threshold is passed as a value to the constructor of the class, default is 0.8.</p>

<p>Example usage:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">shingler_inst</span> <span class="o">=</span> <span class="n">shingler</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">doc</span> <span class="o">=</span> <span class="s">"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">doc2</span> <span class="o">=</span> <span class="s">"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident bla bla bla."</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shinglings</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_shingles</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shinglings</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_hashed_shingles</span><span class="p">(</span><span class="n">shinglings</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shingle2</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_shingles</span><span class="p">(</span><span class="n">doc2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">shingle2</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_hashed_shingles</span><span class="p">(</span><span class="n">shingle2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">signer</span> <span class="o">=</span> <span class="n">minhashSigner</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">signature_matrix</span> <span class="o">=</span> <span class="n">signer</span><span class="p">.</span><span class="n">compute_signature_matrix</span><span class="p">([</span><span class="n">shinglings</span><span class="p">,</span><span class="n">shingle2</span><span class="p">])</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lsh_instance</span> <span class="o">=</span> <span class="n">lsh</span><span class="p">(</span><span class="n">threshold</span><span class="o">=</span><span class="mf">0.7</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">lsh_instance</span><span class="p">.</span><span class="n">get_similar_items</span><span class="p">(</span><span class="n">signature_matrix</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
<span class="p">{(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)}</span>
</code></pre></div></div>

<h1 id="benchmark-time">Benchmark Time</h1>
<p>Now that we have implemented the whole code for fast approximate duplicate document detection, let’s test it out against brute force detection and see what happens.
As the first step, we load the <a href="https://github.com/nicoDs96/Document-Similarity-using-Python-and-PySpark/blob/master/LSH/dataset_rent_rome_kijiji.tsv">dataset</a> as a pandas data frame.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Loading dataset..."</span><span class="p">)</span>
<span class="n">dataset</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"dataset_rent_rome_kijiji.tsv"</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">"</span><span class="se">\t</span><span class="s">"</span><span class="p">)</span>
<span class="n">dataset</span><span class="p">[</span><span class="s">'doc_id'</span><span class="p">]</span><span class="o">=</span><span class="n">dataset</span><span class="p">.</span><span class="n">index</span>
<span class="n">doc_nr</span> <span class="o">=</span> <span class="n">dataset</span><span class="p">[</span><span class="s">'doc_id'</span><span class="p">].</span><span class="nb">max</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Dataset loaded correctly."</span><span class="p">)</span>
</code></pre></div></div>
<p>Then transform documents into k-shingles.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Producing Shingles..."</span><span class="p">)</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="c1">#an array where the index i represent the document_id and the element shingling_list[i] the hashed shingles for document document_id
</span><span class="n">shingling_list</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">doc_nr</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span> 
<span class="n">shingling_size</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">signature_size</span> <span class="o">=</span> <span class="mi">50</span>
<span class="n">bands_nr</span> <span class="o">=</span> <span class="mi">10</span>

<span class="n">shingler_inst</span> <span class="o">=</span> <span class="n">shingler</span><span class="p">(</span><span class="n">shingling_size</span><span class="p">)</span>

<span class="c1">#produce hashed shinglings for all documents
</span><span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">.</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="n">doc</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'Title'</span><span class="p">]</span><span class="o">+</span><span class="s">" "</span><span class="o">+</span><span class="n">row</span><span class="p">[</span><span class="s">'Short Description'</span><span class="p">]</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="s">'doc_id'</span><span class="p">]</span>
    
    <span class="n">shinglings</span> <span class="o">=</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_hashed_shingles</span><span class="p">(</span> <span class="n">shingler_inst</span><span class="p">.</span><span class="n">get_shingles</span><span class="p">(</span><span class="n">doc</span><span class="p">)</span> <span class="p">)</span>
    <span class="n">shingling_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">shinglings</span>

<span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Shingles produced in:</span><span class="se">\t</span><span class="s"> %.2f seconds."</span><span class="o">%</span><span class="p">(</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">))</span>
</code></pre></div></div>
<p>And we sign all the shingles and get the signature matrix.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">signer</span> <span class="o">=</span> <span class="n">minhashSigner</span><span class="p">(</span><span class="n">signature_size</span><span class="p">)</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Computing signature matrix..."</span><span class="p">)</span>
<span class="c1">#produce a signature for each shingle set
</span><span class="n">signature_matrix</span> <span class="o">=</span> <span class="n">signer</span><span class="p">.</span><span class="n">compute_signature_matrix</span><span class="p">(</span> <span class="n">shingling_list</span> <span class="p">)</span>
<span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Signature Matrix computed in:</span><span class="se">\t</span><span class="s"> %.2f seconds."</span> <span class="o">%</span><span class="p">(</span><span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">))</span>
</code></pre></div></div>
<p>In the end, we compute similar pairs with LSH.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lsh_instance</span> <span class="o">=</span> <span class="n">lsh</span><span class="p">(</span><span class="n">threshold</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Computing LSH similarity..."</span><span class="p">)</span>
<span class="n">lsh_similar_itemset</span> <span class="o">=</span> <span class="n">lsh_instance</span><span class="p">.</span><span class="n">get_similar_items</span><span class="p">(</span><span class="n">signature_matrix</span><span class="p">,</span> <span class="n">bands_nr</span><span class="p">,</span> <span class="n">signature_size</span><span class="p">)</span>
<span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">lsh_computation_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>
<span class="k">print</span><span class="p">(</span><span class="s">"LSH Similarity computed in:</span><span class="se">\t</span><span class="s"> %.2f seconds.</span><span class="se">\n</span><span class="s">Similar Elements Found: %d"</span> <span class="o">%</span><span class="p">(</span><span class="n">lsh_computation_time</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">lsh_similar_itemset</span><span class="p">)))</span>
</code></pre></div></div>

<p>We compute the similar pairs using brute force</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">bfsc</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">compare_shingles_set_js</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">set1</span><span class="p">,</span> <span class="n">set2</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">set1</span><span class="p">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">set2</span><span class="p">))</span><span class="o">/</span><span class="nb">len</span><span class="p">(</span><span class="n">set1</span><span class="p">.</span><span class="n">union</span><span class="p">(</span><span class="n">set2</span><span class="p">))</span>

<span class="n">brute_force_comparer</span> <span class="o">=</span> <span class="n">bfsc</span><span class="p">()</span>
<span class="n">brute_force_similar_items</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
<span class="n">start_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">doc_nr</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">doc_nr</span><span class="p">):</span>
        <span class="n">similarity</span> <span class="o">=</span> <span class="n">brute_force_comparer</span><span class="p">.</span><span class="n">compare_shingles_set_js</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="n">shingling_list</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span><span class="nb">set</span><span class="p">(</span><span class="n">shingling_list</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
        <span class="k">if</span> <span class="n">similarity</span> <span class="o">&gt;=</span> <span class="mf">0.8</span><span class="p">:</span>
            <span class="n">brute_force_similar_items</span><span class="p">.</span><span class="n">add</span><span class="p">(</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="p">)</span> 
            
<span class="n">end_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bf_computation_time</span> <span class="o">=</span> <span class="n">end_time</span> <span class="o">-</span> <span class="n">start_time</span>      
</code></pre></div></div>

<p>Check for similar pairs</p>
<ol>
  <li>LSH
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docs</span> <span class="o">=</span> <span class="n">lsh_similar_itemset</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Doc 1:"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">dataset</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">docs</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Is similar to</span><span class="se">\n</span><span class="s">Doc2:"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">dataset</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">docs</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>Brute Force
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docs</span> <span class="o">=</span> <span class="n">brute_force_similar_items</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Doc 1:"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">dataset</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">docs</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Is similar to</span><span class="se">\n</span><span class="s">Doc2:"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">dataset</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">docs</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="p">)</span>
</code></pre></div>    </div>
    <p>Print stats<br />
```python
report = (‘LSH\n%.2f seconds to execute\n’
 ‘%d similar documents found\n\n’
 ‘Bruteforce search\n%.2f seconds to execute\n’
 ‘%d similar documents found.\n\n’
 ‘They find %d common similarities.’)</p>
  </li>
</ol>

<p>print(report %(lsh_computation_time, len(lsh_similar_itemset),bf_computation_time,len(brute_force_similar_items),len(brute_force_similar_items.intersection(lsh_similar_itemset)) ))
```</p>

<h1 id="conclusion">Conclusion</h1>
<p>In this article we have seen:</p>
<ol>
  <li>how to transform a document into a set using k-shingling</li>
  <li>how to represent a set in a compressed way computing its signature in such a way that set similarity is preserved, using MinHashing.</li>
  <li>how to implement a hashing function that hashes similar items in the same bucket, using LSH (locality-sensitive hashing).</li>
  <li>how to compare the approximate method with the brute force method.</li>
</ol>

<p>All the theory behind the code here can be found in <a href="http://www.mmds.org/#ver21">chapter 3 of the book “Mining of Massive Datasets”</a></p>

<p>You can find the full example on <a href="https://github.com/nicoDs96/Document-Similarity-using-Python-and-PySpark/blob/master/LSH/DM_HW2_Ex2.ipynb">GitHub</a>. I wrote also a notebook with an Apache Spark implementation, available <a href="https://github.com/nicoDs96/Document-Similarity-using-Python-and-PySpark/blob/master/LSH/DM_HW2_Ex2.ipynb">on GitHub</a>.</p>

<p>Despite it is interesting to understand how that algorithm works, it is always a good idea to check for robust libraries to put this algorithm in production. A lot how implementations exist depending on the use case, here there are a fews:</p>
<ul>
  <li><a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.MinHashLSH.html#pyspark.ml.feature.MinHashLSH">Apache Spark Implementation</a></li>
  <li><a href="http://ekzhu.com/datasketch/">datasketch</a></li>
  <li><a href="https://proxy-nyc.hidemyass-freeproxy.com/proxy/it-it/aHR0cHM6Ly93d3cudWJlci5jb20vYmxvZy9sc2gv">LSH usage @ Uber</a></li>
  <li><a href="https://github.com/idealista/tlsh-js">Idealista implementation</a></li>
  <li><a href="https://github.com/spotify/annoy">Spotify implementation</a></li>
  <li><a href="https://engineering.fb.com/2017/03/29/data-infrastructure/faiss-a-library-for-efficient-similarity-search/">Facebook implementation</a></li>
  <li><a href="https://github.com/erikbern/ann-benchmarks">Benchmarks of some implementations</a></li>
</ul>]]></content><author><name>nicods</name></author><category term="blog" /><category term="python" /><category term="lsh" /><category term="minhash" /><category term="similarity" /><category term="forecasting" /><summary type="html"><![CDATA[How to implement fast document duplicate detection in python using locality sensitive hashing.]]></summary></entry><entry><title type="html">Dates intersection on SCD columns like a pro</title><link href="https://nicods96.github.io/hi/dates-intersection-conditions-on-SCD-columns-like-a-pro/" rel="alternate" type="text/html" title="Dates intersection on SCD columns like a pro" /><published>2022-02-21T23:57:00+00:00</published><updated>2022-02-21T23:57:00+00:00</updated><id>https://nicods96.github.io/hi/dates-intersection-conditions-on-SCD-columns-like-a-pro</id><content type="html" xml:base="https://nicods96.github.io/hi/dates-intersection-conditions-on-SCD-columns-like-a-pro/"><![CDATA[<blockquote>
  <p>A copy of this article has been published on <a href="https://www.codemotion.com/magazine/ai-ml/data-science/date-intervals-in-data-warehouses-and-data-lakes/">Codemotion Magazione</a></p>
</blockquote>

<p>Working as Data Engineer makes you work with dates and time data a lot. Especially in the recent period where companies want to be Data-Driven, decisions are data-driven, your coffee machine is data-driven, and AI and ML require tons of data to work.</p>

<p>In a data warehouse or data lake context, modeling data using a type of <a href="https://en.wikipedia.org/wiki/Slowly_changing_dimension">slow changing dimenion</a> (SCD) is a quite popular choice. 
For example, suppose you have clients registry data, and each time a client changes his shipping address then you set the end_date of the previous shipping address and the start_date of the new record with the timestamp the modification inside the address_tbl:</p>

<table>
  <thead>
    <tr>
      <th>client_id</th>
      <th>shipping_address</th>
      <th>start_timestamp</th>
      <th>end_timestamp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>client_1</td>
      <td>383 Trusel DriveNorth Andover, MA 01845</td>
      <td>2015-01-14 00:00:00</td>
      <td>2017-05-11 10:00:00</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>91 Gates St. Valrico, FL 33594</td>
      <td>2017-05-11 10:00:00</td>
      <td>2999-01-01 23:59:59</td>
    </tr>
  </tbody>
</table>

<p>Then you know that a client_1’s current shipping_address is the one satisfying the condition</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">client_id</span><span class="o">=</span><span class="n">client_1</span> <span class="k">and</span>
    <span class="n">address_tbl</span><span class="p">.</span><span class="n">start_date</span> <span class="o">&lt;=</span> <span class="k">current_date</span> <span class="o">&lt;</span> <span class="n">address_tbl</span><span class="p">.</span><span class="n">end_date</span> 
</code></pre></div></div>

<p>Then you have another table called fav_payment_method telling your client’s favourtie payment method:</p>

<table>
  <thead>
    <tr>
      <th>client_id</th>
      <th>start_timestamp</th>
      <th>end_timestamp</th>
      <th>payment_method</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>client_1</td>
      <td>2015-01-01 00:00:00</td>
      <td>2016-01-01 00:00:00</td>
      <td>at_delivery_time</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2016-01-01 00:00:00</td>
      <td>2018-01-01 10:00:00</td>
      <td>paypal</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2018-01-01 10:00:00</td>
      <td>2019-01-01 23:00:00</td>
      <td>credit card</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2019-01-01 23:00:00</td>
      <td>2999-01-01 23:59:59</td>
      <td>paypal</td>
    </tr>
  </tbody>
</table>

<p>And, don’t ask the BU why, but you have to associate to each client’s shipping address his favorite payment method. How often do I see people doing that? 
Sometimes:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">address_tbl</span> <span class="k">at</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">fav_payment_method</span> <span class="n">fpm</span>
    <span class="k">ON</span> <span class="k">at</span><span class="p">.</span><span class="n">client_id</span> <span class="o">=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">client_id</span>
<span class="k">WHERE</span>   <span class="p">(</span><span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="k">AND</span> 
        <span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&lt;</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span> <span class="k">OR</span> <span class="c1">-- (1)</span>
        <span class="p">(</span><span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="k">AND</span>
        <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&lt;</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span>  <span class="c1">-- (2)</span>
</code></pre></div></div>
<p>That graphically is 
<img class="image" src="https://nicods96.github.io/hi/assets/images/time_seg_intersection/1.png" alt="Cover Image" /></p>

<p>And you can clearly see that there is a case that is not covered!</p>

<p>Other times:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">address_tbl</span> <span class="k">at</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">fav_payment_method</span> <span class="n">fpm</span>
    <span class="k">ON</span> <span class="k">at</span><span class="p">.</span><span class="n">client_id</span> <span class="o">=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">client_id</span>
<span class="k">WHERE</span>   <span class="p">(</span><span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="k">AND</span>
        <span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&lt;</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span> <span class="k">OR</span> <span class="c1">-- (1)</span>
        <span class="p">(</span><span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="k">AND</span>
        <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&lt;</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span> <span class="k">OR</span> <span class="c1">-- (2 )</span>
        <span class="p">(</span><span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&gt;=</span> <span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="k">AND</span>
        <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&lt;</span> <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span> <span class="k">OR</span> <span class="c1">-- (3)</span>
        <span class="p">(</span><span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&gt;=</span> <span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="k">AND</span>
        <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&lt;</span> <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span>  <span class="c1">-- (4)</span>
</code></pre></div></div>
<p>That is like the previous image plus other two cases (still with some uncovered options!)
<img class="image" src="https://nicods96.github.io/hi/assets/images/time_seg_intersection/2.png" alt="Cover Image" /></p>

<p>But indeed we can be less naive than this. It turns out that the problem is a 1D segment intersection problem. Segments are your ranges of dates and you only need to take the periods that intersect. But how can we write that? And can we do it simply?<br />
Well, we can say that two segments intersect if and only if they not(not intersect). Ah-ah, simple right?</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/time_seg_intersection/3.png" alt="Cover Image" /></p>

<p>from the picture we see that there isn’t an intersection when:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&gt;</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="k">or</span> <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&lt;</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span>
</code></pre></div></div>
<p>This also means that negating this condition we obtain not(not intersect)</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&lt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="k">and</span>  <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span>
</code></pre></div></div>

<p>and we can finally write a simple, clean and concise query that does exactly what we wanted:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="o">*</span> 
<span class="k">FROM</span> <span class="n">address_tbl</span> <span class="k">at</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">fav_payment_method</span> <span class="n">fpm</span>
    <span class="k">ON</span> <span class="k">at</span><span class="p">.</span><span class="n">client_id</span> <span class="o">=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">client_id</span>
<span class="k">WHERE</span>   <span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&lt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="k">and</span>  
        <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>fpm.client_id</th>
      <th>fpm.start_timestamp</th>
      <th>fpm.end_timestamp</th>
      <th>fpm.payment_method</th>
      <th>at.client_id</th>
      <th>at.shipping_address</th>
      <th>at.start_timestamp</th>
      <th>at.end_timestamp</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>client_1</td>
      <td>2015-01-01 00:00:00</td>
      <td>2016-01-01 00:00:00</td>
      <td>at_delivery_time</td>
      <td>client_1</td>
      <td>383 Trusel DriveNorth Andover, MA 01845</td>
      <td>2015-01-14 00:00:00</td>
      <td>2017-05-11 10:00:00</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2016-01-01 00:00:00</td>
      <td>2018-01-01 10:00:00</td>
      <td>paypal</td>
      <td>client_1</td>
      <td>383 Trusel DriveNorth Andover, MA 01845</td>
      <td>2015-01-14 00:00:00</td>
      <td>2017-05-11 10:00:00</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2016-01-01 00:00:00</td>
      <td>2018-01-01 10:00:00</td>
      <td>paypal</td>
      <td>client_1</td>
      <td>91 Gates St. Valrico, FL 33594</td>
      <td>2017-05-11 10:00:00</td>
      <td>2999-01-01 23:59:59</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2018-01-01 10:00:00</td>
      <td>2019-01-01 23:00:00</td>
      <td>credit card</td>
      <td>client_1</td>
      <td>91 Gates St. Valrico, FL 33594</td>
      <td>2017-05-11 10:00:00</td>
      <td>2999-01-01 23:59:59</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2019-01-01 23:00:00</td>
      <td>2999-01-01 23:59:59</td>
      <td>paypal</td>
      <td>client_1</td>
      <td>91 Gates St. Valrico, FL 33594</td>
      <td>2017-05-11 10:00:00</td>
      <td>2999-01-01 23:59:59</td>
    </tr>
  </tbody>
</table>

<h2 id="hey-there-are-two-start_timestamp-and-end_timestamp-and-they-overlap-what-should-i-do">“Hey there are two start_timestamp and end_timestamp and they overlap, what should I do?”</h2>
<p>So far so good, but then the final user of the tables says “Hey there are two start_timestamp and end_timestamp and they overlap, what should I do? Why are you data engineer always making my life difficult? I hate you guys!”. It hurts our feelings each time we heard a complaint, so we go one step further and give them a unique, continuous, and coherent start_timestamp and end_timestamp. But How?<br />
<img class="image" src="https://nicods96.github.io/hi/assets/images/time_seg_intersection/4.png" alt="Cover Image" />
Looking at the picture We can compute the intersection of the date segments to get the new periods for each record. The intersection of 1D segments is \(intersection\_start\_timestamp = max(ad.start\_timestamp, fpm.start\_timestamp)\) and \(intersection\_end\_timestamp = min(ad.end\_timestamp, fpm.end\_timestamp)\)
<img class="image" src="https://nicods96.github.io/hi/assets/images/time_seg_intersection/5.gif" alt="Cover Image" />
and the final result is:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">SELECT</span> <span class="n">fpm</span><span class="p">.</span><span class="n">client_id</span><span class="p">,</span> 
    <span class="n">greatest</span><span class="p">(</span><span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span><span class="p">,</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span><span class="p">)</span> <span class="k">as</span> <span class="n">start_timestamp</span><span class="p">,</span>
    <span class="n">least</span><span class="p">(</span><span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">,</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span><span class="p">)</span> <span class="k">as</span> <span class="n">end_timestamp</span><span class="p">,</span>
    <span class="n">fpm</span><span class="p">.</span><span class="n">payment_method</span><span class="p">,</span>
    <span class="k">at</span><span class="p">.</span><span class="n">shipping_address</span>
<span class="k">FROM</span> <span class="n">address_tbl</span> <span class="k">at</span> <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">fav_payment_method</span> <span class="n">fpm</span>
    <span class="k">ON</span> <span class="k">at</span><span class="p">.</span><span class="n">client_id</span> <span class="o">=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">client_id</span>
<span class="k">WHERE</span>   <span class="k">at</span><span class="p">.</span><span class="n">start_timestamp</span> <span class="o">&lt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="k">and</span>  
        <span class="k">at</span><span class="p">.</span><span class="n">end_timestamp</span> <span class="o">&gt;=</span> <span class="n">fpm</span><span class="p">.</span><span class="n">start_timestamp</span>
</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>client_id</th>
      <th>start_timestamp</th>
      <th>end_timestamp</th>
      <th>payment_method</th>
      <th>shipping_address</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>client_1</td>
      <td>2015-01-01 00:00:00</td>
      <td>2016-01-01 00:00:00</td>
      <td>at_delivery_time</td>
      <td>383 Trusel DriveNorth Andover, MA 01845</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2016-01-01 00:00:00</td>
      <td>2017-05-11 10:00:00</td>
      <td>paypal</td>
      <td>383 Trusel DriveNorth Andover, MA 01845</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2017-05-11 10:00:00</td>
      <td>2018-01-01 10:00:00</td>
      <td>paypal</td>
      <td>91 Gates St. Valrico, FL 33594</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2018-01-01 10:00:00</td>
      <td>2019-01-01 23:00:00</td>
      <td>credit card</td>
      <td>91 Gates St. Valrico, FL 33594</td>
    </tr>
    <tr>
      <td>client_1</td>
      <td>2019-01-01 23:00:00</td>
      <td>2999-01-01 23:59:59</td>
      <td>paypal</td>
      <td>91 Gates St. Valrico, FL 33594</td>
    </tr>
  </tbody>
</table>

<p>Have a good query!</p>]]></content><author><name>nicods</name></author><category term="blog" /><category term="query" /><category term="SCD" /><category term="dates" /><category term="segments" /><category term="intersection" /><summary type="html"><![CDATA[Use logic to write queries conditions. Negate the problem to get a different perspective]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/time_seg_intersection/3.png" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/time_seg_intersection/3.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Designing A Deep Reinforcement Learning Trading Bot With PyTorch</title><link href="https://nicods96.github.io/hi/designing-a-pytorch-deep-reinforcement-learning-trading-bot/" rel="alternate" type="text/html" title="Designing A Deep Reinforcement Learning Trading Bot With PyTorch" /><published>2022-01-22T18:04:00+00:00</published><updated>2022-01-22T18:04:00+00:00</updated><id>https://nicods96.github.io/hi/designing-a-pytorch-deep-reinforcement-learning-trading-bot</id><content type="html" xml:base="https://nicods96.github.io/hi/designing-a-pytorch-deep-reinforcement-learning-trading-bot/"><![CDATA[<!--<img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/cover.png" alt="Cover Image"/>-->
<p>A few years ago, at university, to pass the exam of Neural Networks class we should implement a recent paper and try to replicate results. At that time a friend of mine wrote a paper based on his thesis for his bachelor’s degree about a deep reinforcement trading bot that was able to trade bitcoin and he claims the bot could make profits. I was a bit skeptical about it and decided to implement a personal version of the bot, test it, and use it as the final project of the NN class. Here I am going to describe it.</p>

<h1 id="where-to-find-it">Where To Find It</h1>
<p>You can find the project on GitHub: <a href="https://github.com/nicoDs96/Trading-Bot---Deep-Reinforcement-Learning">Project Repo</a>.</p>

<p>The repo also contains a <a href="https://github.com/nicoDs96/Trading-Bot---Deep-Reinforcement-Learning/blob/master/report.pdf">report</a> I used to describe the bot to the professor at the time, with some pills of background math theory.</p>

<p>Feel free to open an issue or a pull request if you want to contribute.</p>

<h1 id="background">Background</h1>
<p>In the <a href="https://www.researchgate.net/publication/333107392_A_Deep_Reinforcement_Learning_Approach_for_Automated_Cryptocurrency_Trading">paper we based the implementation on</a> the authors try to adapt some Deep Reinforcement
Learning techniques, namely DQN, Double DQN, and Dueling Double
DQN, to allow an agent to trade cryptocurrency stocks. The trading
environment simulation gives the possibility to either buy, hold or sell a position. The profit made during trading is measured with the Sharpe ratio index or a simple profit difference function.<br />
In the reinforcement learning field, the agent is someone with a goal that should interact with an environment to reach its goal. You can think about it as your robot vacuum cleaner whose goal is to clean your house. An agent \(A\) can have states \(s_1, .., s_n\), like resting, cleaning, moving, etc., and can perform some actions \(a_1, .., a_m\) on the environment, like “suck the dust” or “move to another room”. Whenever an agent acts on the environment he modifies it, so the environment moves to a new state \(s_{t+1}\) and the agent collects a reward \(r_t\) telling him if he did a step towards its goal or not.<br />
<img class="image" src="https://nicods96.github.io/hi/assets/images/drl-trading-bot/roomGif.gif" alt="Example Gif" />
The whole deep reinforcement learning world is based on a simple fact: neural networks are universal function approximators, we can simply create a NN model and train it to resemble the Q functions or whatever RL functions you plan to use.</p>

<h1 id="the-environment">The Environment</h1>
<p>We can think of the Environment as a wrapper around our data with minimal access methods and a bit of logic. In detail, you can only access data by calling the method <code class="language-plaintext python highlighter-rouge">def get_state(self):</code>. it gives to you the current stock price window, corresponding to the environment state.<br />
Then you can interact with it only with the <code class="language-plaintext python highlighter-rouge">def step(self, act):</code> method. It simply acts as the Agent on the environment (the input parameter), computes the reward for the agent and it updates some data structures to keep track of some econometric indexes during time, used to evaluate the model.<br />
In detail, an Agent can either buy, sell, hold/do-nothing. If the agent has bought at a given price and then in the next step it does nothing this means he is holding a position because he thinks the price is going to rise. If the Agent has no position and he does not buy then he is doing nothing because he thinks it is not convenient to buy now.</p>

<h1 id="the-agent">The Agent</h1>
<p>The Agent is a wrapper for the model and it takes care of the training and inference logic. The test phase <code class="language-plaintext python highlighter-rouge">def test(self, env_test, model_name=None, path=None)</code> in the agent assumes you have an already trained model and you have exported it. It then loads the exported model into one of the models defined into <code class="language-plaintext highlighter-rouge">models.py</code> according to the parameters and then starts the canonical observe-act-collect loop, saving all the metrics needed to evaluate the model.<br />
The training phase <code class="language-plaintext python highlighter-rouge">def train(self, env, path, num_episodes=40):</code>  is a bit more complex apparently because it included model optimization. The loop becomes observe-act-collect-optimize and the optimize phase requires a bit of background knowledge to be mastered (perfectly covered on the <a href="https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html">pytorch doc</a>, the code here is only an adaptation to a different kind of use case).<br />
The code in the repo comes with some pretrained models <code class="language-plaintext highlighter-rouge">profit_reward_double_ddqn_model, profit_reward_double_dqn_model, profit_reward_dqn_model, sr_reward_double_ddqn_model, sr_reward_double_dqn_model, sr_reward_dqn_model</code> and the main.py only evalutes those pre-trained moedels. If you want also to train them you should check the <code class="language-plaintext highlighter-rouge">train_test.py</code> script.</p>

<h1 id="replay-memory-buffer">Replay Memory Buffer</h1>
<p>The replay memory buffer is a useful tool that is perfectly explained in <a href="https://towardsdatascience.com/deep-q-network-dqn-ii-b6bf911b6b2c">this article</a> from <a href="https://torres-ai.medium.com/">Jordi Torres</a> that I would like to quote:</p>
<blockquote>
  <p>We are trying to approximate a complex, nonlinear function, Q(s, a), with a Neural Network. To do this, we must calculate targets using the Bellman equation and then consider that we have a supervised learning problem at hand. However, <strong>one of the fundamental requirements for SGD optimization is that the training data is independent and identically distributed</strong> and when the Agent interacts with the Environment, the sequence of experience tuples can be highly correlated. The naive Q-learning algorithm that learns from each of these experiences tuples in sequential order runs the risk of getting swayed by the effects of this correlation.
We can prevent action values from oscillating or diverging catastrophically using a large buffer of our past experience and sample training data from it, instead of using our latest experience. This technique is called <strong>replay buffer</strong> or <strong>experience buffer</strong>. The replay buffer contains a collection of experience tuples (S, A, R, S′). The tuples are gradually added to the buffer as we are interacting with the Environment. The simplest implementation is a buffer of fixed size, with new data added to the end of the buffer so that it pushes the oldest experience out of it. The act of sampling a small batch of tuples from the replay buffer in order to learn is known as <strong>experience replay</strong>.</p>
</blockquote>

<h1 id="conclusion">Conclusion</h1>
<p>Although the DRL is always used to play video games with AI, it is interesting to apply them also to other fields, since they are very promising AI methods. Although very exciting, I invite you to be always a bit skeptical about what you read. If you pay attention to both  <a href="https://github.com/nicoDs96/Trading-Bot---Deep-Reinforcement-Learning/blob/master/report.pdf">the report</a> of this project and <a href="https://link.springer.com/chapter/10.1007/978-3-030-19823-7_20">the original paper it is based on</a>, you will note that there isn’t any error plot or similar metrics. This is likely a sign that the results you are reading are not telling the whole truth. Indeed, in my report, I deliberately hid them to get a higher grade on the exam (and luckily it worked out), but the truth is that the models do not have a significant decrease in error. In brief, they do not learn anything and act almost randomly at each step.</p>]]></content><author><name>nicods</name></author><category term="blog" /><category term="PyTorch" /><category term="DRL" /><category term="trading" /><category term="bot" /><category term="forecasting" /><summary type="html"><![CDATA[A personal implementation of an existing paper about bitcoin trading using a deep reinforcement learning trading agent.]]></summary></entry><entry><title type="html">Keep training on vacations</title><link href="https://nicods96.github.io/hi/keep-training-on-vacations/" rel="alternate" type="text/html" title="Keep training on vacations" /><published>2021-08-26T10:23:00+00:00</published><updated>2021-08-26T10:23:00+00:00</updated><id>https://nicods96.github.io/hi/keep-training-on-vacations</id><content type="html" xml:base="https://nicods96.github.io/hi/keep-training-on-vacations/"><![CDATA[<p><img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/cover.png" alt="Cover Image" />
In my free time, one of the activities I enjoy the most is (kick)boxing. I found an amazing gym in my hometown (thanks to Covid I left Rome, keep working remotely, and it was great!) that makes me more passionate than ever about fighting sports.</p>

<p>Very often a constant in fighting sports gyms is a semi-programmable timer that marks the seconds between training and rest. A common use for this timer is to emulate fight timing and repeat series of 3 min workouts and 1 min rest for 12 times more or less. In August I was on vacation and I wanted to keep training doing circuits based on time but how? I didn’t want to buy a gym timer and I wasn’t satisfied with digital ones. I ended up building one myself and I did it trying to increase my software engineering skills.&lt;/p&gt;</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/timer.jpg" alt="Gym Timer Picture" /></p>

<h2 id="where-to-find-it">Where To Find It</h2>
<p>You can fine the project on GitHub: <a href="https://github.com/nicoDs96/BoxeTimer">Project Repo</a>.</p>

<p>You can use it at: <a href="https://nicods96.github.io/BoxeTimer/">The Timer Web App</a>.</p>

<p>Feel free to open an issue or a pull request if you want to contribute.</p>

<h2 id="requirements">Requirements</h2>
<p>I want to build something that:</p>

<ul>
  <li>was able to alternate workout time and rest time like at the gym;</li>
  <li>was simple and small in size;</li>
  <li>can run on most mobile devices;</li>
  <li>write less code possible since I also want to enjoy my holiday;</li>
  <li>experiment things that I learned in theory but never practiced with;</li>
</ul>

<h2 id="design">Design</h2>
<p>To satisfy those requirements I choose to build a web app hosted on Github since no backend logic was required and there is no effort nor cost to host a static page on <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>I decided to use plain HTML + Javascript to keep it small and fast to load. The only library I used is <a href="https://getbootstrap.com/">Bootstrap</a> to display the app properly on any device (both pc or mobiles).</p>

<p>The main components of the app are a Timer, that works as a clock and keeps track of time, and a Session, that defines the training and rest times and the number of repetition of the train-rest loop.</p>

<h3 id="tools-and-project-setup">Tools and Project Setup</h3>

<p>Since the main goal was to keep evrything simple I used <a href="https://code.visualstudio.com/">VsCode</a> as editor since I had it on my pc but I never really used it without any specific estention. The project was organized in directories as follows:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|-- README.m
|-- ToDO.md
|-- index.html
|-- css
|   |-- FontImport.css
|   |-- bootstrap
|   |-- font
|   |   |-- DSEG7Modern-Regular.ttf
|   |   |-- DSEG7Modern-Regular.woff
|   |   `-- DSEG7Modern-Regular.woff2
|   `-- main.css
|-- js
|   |-- bootstrap
|   `-- src
|       |-- Controller
|       |   `-- TimerController.js
|       |-- Model
|       |   |-- Session.js
|       |   `-- Timer.js
|       |-- View
|       |   `-- ViewUtils.js
|       `-- utils
|           |-- WakeLocker.js
|           `-- zip.js
`-- res
    `-- buzz.mp3d
</code></pre></div></div>
<p>We have an index.html file where the UI is defined and where all the js scripts are referenced. There is the css folder where it is included the css boundles of the bootstrap library, a custom font and the main page colors (main.css). Then the js folder that contains all the application logic. Ther folder is divided into Model, View, Controller and utils folders to reflect what each script inside a folder is responsible for.</p>

<h3 id="version-control-style">Version Control Style</h3>
<p>Of course, since the project is hosted on GitHub Pages, it must use some sort of version control. There are a myriad of git branching models (<a href="https://nvie.com/posts/a-successful-git-branching-model/">GitFlow</a>, <a href="https://guides.github.com/introduction/flow/">GitHubFlow</a>, etc …) but I was curious to experiment with <a href="https://trunkbaseddevelopment.com/">Trunk Based Development</a> that looks like the leading industry standard even if I was alone and I cannot really enjoy the benefits of the method.</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/tbd.png" alt="Trunk Based VC" /></p>

<p>The main page describes the method as:</p>
<blockquote>
  <p>A source-control branching model, where developers collaborate on code in a single branch called ‘trunk’ *, resist any pressure to create other long-lived development branches by employing documented techniques. They therefore avoid merge hell, do not break the build, and live happily ever after.</p>
</blockquote>

<p>In practice, all the developers work to a release on a release branch and when it is ready to go in production it is merged into master. In this specific case, a merge into master is equal to publishing on the webserver a new version of the web app.</p>

<p>In conjunction, each release is tagged with a release version number following the <a href="https://semver.org/">semantic versioning standard</a>, where the version number is given from a dot-separated triple MAJOR.MINOR.PATCH. Since we are working on a preview version the current releases are only MAJOR.MINOR because no patch is needed.</p>

<h3 id="observer-pattern">Observer Pattern</h3>

<p>One of the major design focuses was trying to make everything asynchronous and event-based. It can be done easily with <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Event_handlers">DOM events</a> because it is what javascript is born for but it became more difficult when must be applied to custom objects and their state.</p>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/obs.png" alt="Observer Pattern" /></p>

<p>A solution to make the code asynchronous and to implement components that react upon state changes is the <a href="https://en.wikipedia.org/wiki/Observer_pattern">Observer Pattern</a>. It is similar to publish-subscribe communication models but implemented for objects: a component interested in an object state adds itself to the object’s observers. The object, whenever its state changes, notifies all its observers of its new inner state. The components interested in the state change will react accordingly.</p>

<h3 id="model-view-controller">Model View Controller</h3>

<p><img class="image" src="https://nicods96.github.io/hi/assets/images/keep-training/mvc.png" alt="Observer Pattern" /></p>

<p>Quoting <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Wikipedia</a></p>
<blockquote>
  <p>“Model–view–controller (usually known as MVC) is a <a href="https://en.wikipedia.org/wiki/Software_design_pattern">software design pattern</a> commonly used for developing <a href="https://en.wikipedia.org/wiki/User_interface">user interfaces</a> that divide the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user. […] Popular programming languages have MVC frameworks that facilitate implementation of the pattern.”</p>
</blockquote>

<p>Since almost all the frameworks to build something with a GUI implements MVC under the hood, I wanted to experiment with applying MVC by myself without any framework or tool to facilitate the work.</p>

<h2 id="implementation">Implementation</h2>
<p>Before deep-diving into code, let’s talk about how the problem is modeled. We have two main classes Timer.js and Session.js. They both implement the observer pattern: Session objects observe Timers and GUI controller observes Sessions.</p>

<p>A Timer object has the only ability to count seconds (or fractions of seconds) depending on the input. Each time its inner state is updated (the number of seconds elapsed from the last time is increased) all the observers are notified.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">class</span> <span class="nx">Timer</span><span class="p">{</span>  


    <span class="kd">constructor</span><span class="p">(</span><span class="nx">updateInterval</span> <span class="o">=</span> <span class="mi">500</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_seconds</span> <span class="o">=</span> <span class="mf">0.0</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_updateInterval</span> <span class="o">=</span> <span class="nx">updateInterval</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_updater</span> <span class="o">=</span> <span class="kc">null</span>
    <span class="p">}</span>
    <span class="nx">update</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_seconds</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_updateInterval</span> <span class="o">/</span> <span class="mi">1000</span> 
        
        <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">observer</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">observer</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">getSeconds</span><span class="p">()</span> <span class="p">)</span>
        <span class="p">});</span>
    <span class="p">}</span>
    <span class="nx">start</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_updater</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span> 
            <span class="p">(</span><span class="nx">timer</span> <span class="o">=</span> <span class="k">this</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="nx">timer</span><span class="p">.</span><span class="nx">update</span><span class="p">()}</span>
            <span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">_updateInterval</span>
        <span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">stop</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">clearInterval</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">_updater</span> <span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">getSeconds</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_seconds</span>
    <span class="p">}</span>
    <span class="nx">setObservers</span><span class="p">(</span><span class="nx">observersArrays</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span> <span class="o">=</span> <span class="nx">observersArrays</span>
    <span class="p">}</span>
    <span class="nx">addObserver</span><span class="p">(</span><span class="nx">observer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">observer</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">addObserverArray</span><span class="p">(</span><span class="nx">observers</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span> <span class="nx">observer</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">observer</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The class has main control methods like start(), stop(), update(), and utility methods to add observers or get inner state. In detail a Timer object is built with an “update interval”, telling the class to update the time and notify other objects each X milliseconds. The timer exploits the javascript utility <a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval">setInterval</a> and each time the setIntervall callback is invoked we update the timer seconds count and notify the observers.</p>

<h3 id="observable-session">Observable Session</h3>
<p>Session is initialized with an array of seconds and a number of repetitions. Our goal is to count from 0 to the upper bound in the array for each entry (upper bound) in the array and repeat for the specified number of repetitions. Each time we reach an upper bound a buzzer makes a sound to notify the people using the app.</p>

<p>Session objects observe a Timer object and thus implement the notify method. The first time notify is invoked the session object memorizes the timerSeconds. Then on the next calls it is able to tell how many seconds are elapsed and react accordingly. A session is also observable since the GUI controller will observe it to update the graphical components.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">Session</span><span class="p">{</span>

<span class="kd">constructor</span><span class="p">(</span><span class="nx">timesArray</span><span class="p">,</span> <span class="nx">repetition</span><span class="p">,</span> <span class="nx">buzzerPath</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">res/buzz.mp3</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_timesArray</span> <span class="o">=</span> <span class="nx">timesArray</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_repetition</span> <span class="o">=</span> <span class="nx">repetition</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_buzzer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Audio</span><span class="p">(</span><span class="nx">buzzerPath</span><span class="p">)</span>
           
        <span class="k">this</span><span class="p">.</span><span class="nx">_currentElapsedTime</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_prevTime</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_currentRepetition</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">_currentTimeIndex</span> <span class="o">=</span> <span class="mi">0</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">_isStopped</span> <span class="o">=</span> <span class="kc">false</span>


        <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="p">}</span>


<span class="p">...</span> 

<span class="nx">notify</span><span class="p">(</span><span class="nx">timerSeconds</span><span class="p">){</span> 


        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_isStopped</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_prevTime</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">_prevTime</span> <span class="o">=</span> <span class="nx">timerSeconds</span><span class="p">}</span> <span class="c1">//only for the firs update</span>


            <span class="k">this</span><span class="p">.</span><span class="nx">_currentElapsedTime</span> <span class="o">+=</span> <span class="p">(</span><span class="nx">timerSeconds</span> <span class="o">-</span> <span class="k">this</span><span class="p">.</span><span class="nx">_prevTime</span><span class="p">)</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_prevTime</span> <span class="o">=</span> <span class="nx">timerSeconds</span>
            
            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_currentElapsedTime</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_timesArray</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">_currentTimeIndex</span><span class="p">]){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">playSound</span><span class="p">()</span> <span class="c1">//buzz</span>
                <span class="c1">// switch to next time</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">_currentTimeIndex</span> <span class="o">=</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_currentTimeIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="k">this</span><span class="p">.</span><span class="nx">_timesArray</span><span class="p">.</span><span class="nx">length</span> 
                
                <span class="c1">// when all the times are elapsed</span>
            
                <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_currentTimeIndex</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span>  
                    <span class="k">this</span><span class="p">.</span><span class="nx">_currentRepetition</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1">//update repetition</span>
                <span class="p">}</span>
                
                <span class="c1">//reset current time when switching to a new time limit</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">_currentElapsedTime</span> <span class="o">=</span> <span class="mf">0.0</span>           
            <span class="p">}</span>
    
            <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_currentRepetition</span> <span class="o">==</span> <span class="k">this</span><span class="p">.</span><span class="nx">_repetition</span><span class="p">){</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">()</span>
            <span class="p">}</span>
                    
            <span class="k">this</span><span class="p">.</span><span class="nx">_observers</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">observer</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="nx">observer</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">getState</span><span class="p">()</span> <span class="p">)</span>
            <span class="p">});</span>
        <span class="p">}</span>
 
<span class="p">...</span></code></pre></figure>

<h3 id="prevent-screen-lock">Prevent Screen Lock</h3>

<p>Since the training sessions should be longer than the time our screen stays awake and since a web app requires the page to be always on focus to work properly, we should find a way to prevent device screen lock to bother our training sessions. After some intense googling I came up with <a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API">Screen Wake Lock API</a>. It allows us to prevent device screen lock. Exactly what I was looking for. Unfortunately, it is not supported by all mobile browsers for now so it reduces the support of our web app. However devices with Google Chrome 84 or greater are ok, as well as some others listed in the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API">MDN API</a> doc page, which is better than nothing.</p>

<p>The procedure is only copy-paste code from MDN documentation and simply it locks the screen when we load the page, we re-lock the screen whenever the page loses and then acquire focus again.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="k">if</span> <span class="p">(</span><span class="dl">'</span><span class="s1">wakeLock</span><span class="dl">'</span> <span class="k">in</span> <span class="nb">navigator</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">isWakeLockSupported</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Screen Wake Lock API supported!</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">isWakeLockSupported</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">Wake lock is not supported by this browser.</span><span class="dl">'</span><span class="p">)</span>
<span class="p">}</span>


<span class="kd">let</span> <span class="nx">wakeLock</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>


<span class="kd">let</span> <span class="nx">lock</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span><span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="nx">wakeLock</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">wakeLock</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="dl">'</span><span class="s1">screen</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Wake Lock is active!</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">`The Wake Lock request has failed - usually system related, such as battery:\n</span><span class="p">${</span><span class="nx">err</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">, </span><span class="p">${</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>


<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">visibilitychange</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">wakeLock</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">visibilityState</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">visible</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">wakeLock</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">wakeLock</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="dl">'</span><span class="s1">screen</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">Wake Lock is active again.</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">});</span>


<span class="nx">lock</span><span class="p">()</span></code></pre></figure>

<h3 id="timer-gui">Timer GUI</h3>
<p><strong>View</strong>: The View by definition is what the user can see. In our case, it is the simulation of a 7 segment display and some input and buttons to control it. To make everything simple all the GUI elements are in index.html and are plain HTML tags. All the control, i.e. behavior of the components is defined inside the controller.</p>

<p>All the buttons are not represented with icons or button elemetes. Instead they are simple Unicode strings styled using colors and font size in css. This allows to maintain the page lightweight but yet looking nice.</p>

<p><strong>Controller</strong>: the controller (TimerController.js) is responsible for:</p>
<ul>
  <li>dynamic creation of elements in javascript, like when we click on + or - buttons;</li>
  <li>react to Session object state changes, like highlight the current time or the current repetition number;</li>
  <li>Update GUI elements like displayed time;</li>
  <li>Add logic to clickable element;</li>
  <li>Initialize the page before the training session is set up and started.</li>
</ul>

<h2 id="conclusions">Conclusions</h2>
<p>This project helped me to stay trained on vacation and to improve my software engineering skills by practicing with things at low level (no framework, implement almost evrything from scratch). I have learned:</p>
<ul>
  <li>How to implement MVC</li>
  <li>How to implement Observer Pattern</li>
  <li>To design a web app</li>
  <li>That exist a Screen Lock API specification that later or sooner will be implemented in all the modern browsers. This might mean nothing but I think it is a step forward to get rid of app stores, that i hate by the way (but that’s another story …)</li>
  <li>New way of using version control</li>
  <li>How to corerctly use semantic versioning (YES, there is a specification!)</li>
</ul>

<p>and above all, if you do not like what you find around do not be satisfied, get your hands dirty and improve it! At worst you will have broadened your knowledge.</p>

<p>Disclaimer note: the Session class is not complete on its functionalities and in the future I would like to add Session that can be paused. This might result into wider applicaiton for the timer, like in a basketball game for example.</p>

<p>If you want to contribute, the repo contains a toDO.md file, keep a task, open a issue to discuss the feature and maybe pull the feature.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://nicods96.github.io/BoxeTimer/">The Timer Web App</a></li>
  <li><a href="https://nicods96.github.io/BoxeTimer/">Project Repo</a></li>
  <li><a href="https://pages.github.com/">GitHub Pages</a></li>
  <li><a href="https://getbootstrap.com/">Bootstrap</a></li>
  <li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
  <li><a href="https://nvie.com/posts/a-successful-git-branching-model/">GitFlow</a></li>
  <li><a href="https://guides.github.com/introduction/flow/">GitHubFlow</a></li>
  <li><a href="https://trunkbaseddevelopment.com/">Trunk Based Development</a></li>
  <li><a href="https://semver.org/">Semantic Versioning</a></li>
  <li><a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model View Controller</a></li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API">Screen Wake Lock API</a></li>
</ul>]]></content><author><name>nicods</name></author><category term="project" /><category term="training" /><summary type="html"><![CDATA[I didn't want to buy a gym timer and I wasn't satisfied with digital ones. I ended up building one myself and I did it trying to increase my software engineering skills.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/keep-training/" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/keep-training/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Markdown Extra Components</title><link href="https://nicods96.github.io/hi/markdown-extra-components/" rel="alternate" type="text/html" title="Markdown Extra Components" /><published>2016-02-24T22:48:00+00:00</published><updated>2016-02-24T22:48:00+00:00</updated><id>https://nicods96.github.io/hi/markdown-extra-components</id><content type="html" xml:base="https://nicods96.github.io/hi/markdown-extra-components/"><![CDATA[<h2 id="summary">Summary:</h2>

<p>You can pick as item to see how to apply in markdown.</p>

<h4 id="especial-elements">Especial Elements</h4>
<ul>
  <li><a href="#evidence">Evidence</a></li>
  <li><a href="#side-by-side">Side-by-Side</a></li>
  <li><a href="#star">Star</a></li>
  <li><a href="#especial-breaker">Especial Breaker</a></li>
  <li><a href="#spoiler">Spoiler</a></li>
</ul>

<h4 id="external-elements">External Elements</h4>
<ul>
  <li><a href="#gist">Gist</a></li>
  <li><a href="#codepen">Codepen</a></li>
  <li><a href="#slideshare">Slideshare</a></li>
  <li><a href="#videos">Videos</a></li>
</ul>

<hr />

<h2 id="evidence">Evidence</h2>

<p>You can try the evidence!</p>

<p><span class="evidence">Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</span></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"evidence"</span><span class="nt">&gt;</span>Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.<span class="nt">&lt;/span&gt;</span></code></pre></figure>

<hr />

<h2 id="side-by-side">Side-by-side</h2>

<p>Like the <a href="https://medium.com/">Medium</a> component.</p>

<p><strong>Image</strong> on the left and <strong>Text</strong> on the right:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"side-by-side"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toleft"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"image"</span> <span class="na">src=</span><span class="s">"https://nicods96.github.io/hi/assets/images/profile.jpg"</span> <span class="na">alt=</span><span class="s">"Alt Text"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;figcaption</span> <span class="na">class=</span><span class="s">"caption"</span><span class="nt">&gt;</span>Photo by John Doe<span class="nt">&lt;/figcaption&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toright"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="https://nicods96.github.io/hi/assets/images/profile.jpg" alt="Alt Text" />
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

<p><strong>Text</strong> on the left and <strong>Image</strong> on the right:</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"side-by-side"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toleft"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;p&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="nt">&lt;/p&gt;</span>
    <span class="nt">&lt;/div&gt;</span>

    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toright"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">"image"</span> <span class="na">src=</span><span class="s">"https://nicods96.github.io/hi/assets/images/profile.jpg"</span> <span class="na">alt=</span><span class="s">"Alt Text"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;figcaption</span> <span class="na">class=</span><span class="s">"caption"</span><span class="nt">&gt;</span>Photo by John Doe<span class="nt">&lt;/figcaption&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span></code></pre></figure>

<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="https://nicods96.github.io/hi/assets/images/profile.jpg" alt="Alt Text" />
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>

<hr />

<h2 id="star">Star</h2>

<p>You can give evidence to a post. Just add the tag to the markdown file.</p>

<figure class="highlight"><pre><code class="language-raw" data-lang="raw">star: true</code></pre></figure>

<hr />

<h2 id="especial-breaker">Especial Breaker</h2>

<p>You can add a especial <em>hr</em> to your text.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"breaker"</span><span class="nt">&gt;&lt;/div&gt;</span></code></pre></figure>

<div class="breaker"></div>

<hr />

<h2 id="spoiler">Spoiler</h2>

<p>You can add an especial hidden content that appears on hover.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spoiler"</span><span class="nt">&gt;&lt;p&gt;</span>your content<span class="nt">&lt;/p&gt;&lt;/div&gt;</span></code></pre></figure>

<div class="spoiler"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div>

<hr />

<h2 id="gist">Gist</h2>

<p>You can add Gists from github.</p>

<figure class="highlight"><pre><code class="language-raw" data-lang="raw">{ % gist sergiokopplin/91ff4220480727b47224245ee2e9c291 % }</code></pre></figure>

<noscript><pre>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Just a Test!&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;Working!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></noscript>
<script src="https://gist.github.com/sergiokopplin/91ff4220480727b47224245ee2e9c291.js"> </script>

<hr />

<h2 id="codepen">Codepen</h2>

<p>You can add Pens from Codepen.</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;p</span> <span class="na">data-height=</span><span class="s">"268"</span> <span class="na">data-theme-id=</span><span class="s">"0"</span> <span class="na">data-slug-hash=</span><span class="s">"gfdDu"</span> <span class="na">data-default-tab=</span><span class="s">"result"</span> <span class="na">data-user=</span><span class="s">"chriscoyier"</span> <span class="na">class=</span><span class="s">'codepen'</span><span class="nt">&gt;</span>
    See the Pen <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">'https://codepen.io/chriscoyier/pen/gfdDu/'</span><span class="nt">&gt;</span>Crappy Recreation of the Book Cover of *The Flame Alphabet*<span class="nt">&lt;/a&gt;</span> by Chris Coyier (<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">'https://codepen.io/chriscoyier'</span><span class="nt">&gt;</span>@chriscoyier<span class="nt">&lt;/a&gt;</span>) on <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">'https://codepen.io'</span><span class="nt">&gt;</span>CodePen<span class="nt">&lt;/a&gt;</span>.
<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;script </span><span class="na">async</span> <span class="na">src=</span><span class="s">"//assets.codepen.io/assets/embed/ei.js"</span><span class="nt">&gt;&lt;/script&gt;</span></code></pre></figure>

<p data-height="268" data-theme-id="0" data-slug-hash="gfdDu" data-default-tab="result" data-user="chriscoyier" class="codepen">See the Pen <a href="https://codepen.io/chriscoyier/pen/gfdDu/">Crappy Recreation of the Book Cover of *The Flame Alphabet*</a> by Chris Coyier (<a href="https://codepen.io/chriscoyier">@chriscoyier</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async="" src="//assets.codepen.io/assets/embed/ei.js"></script>

<hr />

<h2 id="slideshare">Slideshare</h2>

<p>Add your presentations here!</p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">src=</span><span class="s">"//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l"</span> <span class="na">width=</span><span class="s">"560"</span> <span class="na">height=</span><span class="s">"310"</span> <span class="na">frameborder=</span><span class="s">"0"</span> <span class="na">marginwidth=</span><span class="s">"0"</span> <span class="na">marginheight=</span><span class="s">"0"</span> <span class="na">scrolling=</span><span class="s">"no"</span> <span class="na">style=</span><span class="s">"border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;"</span> <span class="na">allowfullscreen</span><span class="nt">&gt;</span> <span class="nt">&lt;/iframe&gt;</span></code></pre></figure>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l" width="560" height="310" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>

<hr />

<h2 id="videos">Videos</h2>

<p>Do you want some videos? Youtube, Vimeo or Vevo? Copy the embed code and paste on your post!</p>

<p><strong>Example</strong></p>

<figure class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;iframe</span> <span class="na">width=</span><span class="s">"560"</span> <span class="na">height=</span><span class="s">"310"</span> <span class="na">src=</span><span class="s">"https://www.youtube.com/embed/r7XhWUDj-Ts"</span> <span class="na">frameborder=</span><span class="s">"0"</span> <span class="na">allowfullscreen</span><span class="nt">&gt;&lt;/iframe&gt;</span></code></pre></figure>

<iframe width="560" height="310" src="https://www.youtube.com/embed/r7XhWUDj-Ts" frameborder="0" allowfullscreen=""></iframe>]]></content><author><name>jamesfoster</name></author><category term="blog" /><category term="markdown" /><category term="components" /><category term="extra" /><summary type="html"><![CDATA[Markdown summary with different options]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://nicods96.github.io/hi/assets/images/markdown.jpg" /><media:content medium="image" url="https://nicods96.github.io/hi/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>